// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errors.proto

#ifndef PROTOBUF_errors_2eproto__INCLUDED
#define PROTOBUF_errors_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "config.pb.h"
#include "data.pb.h"
#include "github.com/gogo/protobuf/gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_errors_2eproto();
void protobuf_AssignDesc_errors_2eproto();
void protobuf_ShutdownFile_errors_2eproto();

class GenericError;
class NotLeaderError;
class RangeNotFoundError;
class RangeKeyMismatchError;
class ReadWithinUncertaintyIntervalError;
class TransactionAbortedError;
class TransactionPushError;
class TransactionRetryError;
class TransactionStatusError;
class WriteIntentError;
class WriteTooOldError;
class OpRequiresTxnError;
class ConditionFailedError;
class Error;

// ===================================================================

class GenericError : public ::google::protobuf::Message {
 public:
  GenericError();
  virtual ~GenericError();

  GenericError(const GenericError& from);

  inline GenericError& operator=(const GenericError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GenericError& default_instance();

  void Swap(GenericError* other);

  // implements Message ----------------------------------------------

  GenericError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GenericError& from);
  void MergeFrom(const GenericError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional bool retryable = 2;
  inline bool has_retryable() const;
  inline void clear_retryable();
  static const int kRetryableFieldNumber = 2;
  inline bool retryable() const;
  inline void set_retryable(bool value);

  // @@protoc_insertion_point(class_scope:proto.GenericError)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_retryable();
  inline void clear_has_retryable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  bool retryable_;
  friend void  protobuf_AddDesc_errors_2eproto();
  friend void protobuf_AssignDesc_errors_2eproto();
  friend void protobuf_ShutdownFile_errors_2eproto();

  void InitAsDefaultInstance();
  static GenericError* default_instance_;
};
// -------------------------------------------------------------------

class NotLeaderError : public ::google::protobuf::Message {
 public:
  NotLeaderError();
  virtual ~NotLeaderError();

  NotLeaderError(const NotLeaderError& from);

  inline NotLeaderError& operator=(const NotLeaderError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotLeaderError& default_instance();

  void Swap(NotLeaderError* other);

  // implements Message ----------------------------------------------

  NotLeaderError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotLeaderError& from);
  void MergeFrom(const NotLeaderError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.Replica leader = 1;
  inline bool has_leader() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 1;
  inline const ::proto::Replica& leader() const;
  inline ::proto::Replica* mutable_leader();
  inline ::proto::Replica* release_leader();
  inline void set_allocated_leader(::proto::Replica* leader);

  // @@protoc_insertion_point(class_scope:proto.NotLeaderError)
 private:
  inline void set_has_leader();
  inline void clear_has_leader();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::proto::Replica* leader_;
  friend void  protobuf_AddDesc_errors_2eproto();
  friend void protobuf_AssignDesc_errors_2eproto();
  friend void protobuf_ShutdownFile_errors_2eproto();

  void InitAsDefaultInstance();
  static NotLeaderError* default_instance_;
};
// -------------------------------------------------------------------

class RangeNotFoundError : public ::google::protobuf::Message {
 public:
  RangeNotFoundError();
  virtual ~RangeNotFoundError();

  RangeNotFoundError(const RangeNotFoundError& from);

  inline RangeNotFoundError& operator=(const RangeNotFoundError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeNotFoundError& default_instance();

  void Swap(RangeNotFoundError* other);

  // implements Message ----------------------------------------------

  RangeNotFoundError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RangeNotFoundError& from);
  void MergeFrom(const RangeNotFoundError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 raft_id = 1;
  inline bool has_raft_id() const;
  inline void clear_raft_id();
  static const int kRaftIdFieldNumber = 1;
  inline ::google::protobuf::int64 raft_id() const;
  inline void set_raft_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto.RangeNotFoundError)
 private:
  inline void set_has_raft_id();
  inline void clear_has_raft_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 raft_id_;
  friend void  protobuf_AddDesc_errors_2eproto();
  friend void protobuf_AssignDesc_errors_2eproto();
  friend void protobuf_ShutdownFile_errors_2eproto();

  void InitAsDefaultInstance();
  static RangeNotFoundError* default_instance_;
};
// -------------------------------------------------------------------

class RangeKeyMismatchError : public ::google::protobuf::Message {
 public:
  RangeKeyMismatchError();
  virtual ~RangeKeyMismatchError();

  RangeKeyMismatchError(const RangeKeyMismatchError& from);

  inline RangeKeyMismatchError& operator=(const RangeKeyMismatchError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeKeyMismatchError& default_instance();

  void Swap(RangeKeyMismatchError* other);

  // implements Message ----------------------------------------------

  RangeKeyMismatchError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RangeKeyMismatchError& from);
  void MergeFrom(const RangeKeyMismatchError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes request_start_key = 1;
  inline bool has_request_start_key() const;
  inline void clear_request_start_key();
  static const int kRequestStartKeyFieldNumber = 1;
  inline const ::std::string& request_start_key() const;
  inline void set_request_start_key(const ::std::string& value);
  inline void set_request_start_key(const char* value);
  inline void set_request_start_key(const void* value, size_t size);
  inline ::std::string* mutable_request_start_key();
  inline ::std::string* release_request_start_key();
  inline void set_allocated_request_start_key(::std::string* request_start_key);

  // optional bytes request_end_key = 2;
  inline bool has_request_end_key() const;
  inline void clear_request_end_key();
  static const int kRequestEndKeyFieldNumber = 2;
  inline const ::std::string& request_end_key() const;
  inline void set_request_end_key(const ::std::string& value);
  inline void set_request_end_key(const char* value);
  inline void set_request_end_key(const void* value, size_t size);
  inline ::std::string* mutable_request_end_key();
  inline ::std::string* release_request_end_key();
  inline void set_allocated_request_end_key(::std::string* request_end_key);

  // optional .proto.RangeDescriptor range = 3;
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 3;
  inline const ::proto::RangeDescriptor& range() const;
  inline ::proto::RangeDescriptor* mutable_range();
  inline ::proto::RangeDescriptor* release_range();
  inline void set_allocated_range(::proto::RangeDescriptor* range);

  // @@protoc_insertion_point(class_scope:proto.RangeKeyMismatchError)
 private:
  inline void set_has_request_start_key();
  inline void clear_has_request_start_key();
  inline void set_has_request_end_key();
  inline void clear_has_request_end_key();
  inline void set_has_range();
  inline void clear_has_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* request_start_key_;
  ::std::string* request_end_key_;
  ::proto::RangeDescriptor* range_;
  friend void  protobuf_AddDesc_errors_2eproto();
  friend void protobuf_AssignDesc_errors_2eproto();
  friend void protobuf_ShutdownFile_errors_2eproto();

  void InitAsDefaultInstance();
  static RangeKeyMismatchError* default_instance_;
};
// -------------------------------------------------------------------

class ReadWithinUncertaintyIntervalError : public ::google::protobuf::Message {
 public:
  ReadWithinUncertaintyIntervalError();
  virtual ~ReadWithinUncertaintyIntervalError();

  ReadWithinUncertaintyIntervalError(const ReadWithinUncertaintyIntervalError& from);

  inline ReadWithinUncertaintyIntervalError& operator=(const ReadWithinUncertaintyIntervalError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadWithinUncertaintyIntervalError& default_instance();

  void Swap(ReadWithinUncertaintyIntervalError* other);

  // implements Message ----------------------------------------------

  ReadWithinUncertaintyIntervalError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadWithinUncertaintyIntervalError& from);
  void MergeFrom(const ReadWithinUncertaintyIntervalError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.Timestamp timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline const ::proto::Timestamp& timestamp() const;
  inline ::proto::Timestamp* mutable_timestamp();
  inline ::proto::Timestamp* release_timestamp();
  inline void set_allocated_timestamp(::proto::Timestamp* timestamp);

  // optional .proto.Timestamp existing_timestamp = 2;
  inline bool has_existing_timestamp() const;
  inline void clear_existing_timestamp();
  static const int kExistingTimestampFieldNumber = 2;
  inline const ::proto::Timestamp& existing_timestamp() const;
  inline ::proto::Timestamp* mutable_existing_timestamp();
  inline ::proto::Timestamp* release_existing_timestamp();
  inline void set_allocated_existing_timestamp(::proto::Timestamp* existing_timestamp);

  // @@protoc_insertion_point(class_scope:proto.ReadWithinUncertaintyIntervalError)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_existing_timestamp();
  inline void clear_has_existing_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::proto::Timestamp* timestamp_;
  ::proto::Timestamp* existing_timestamp_;
  friend void  protobuf_AddDesc_errors_2eproto();
  friend void protobuf_AssignDesc_errors_2eproto();
  friend void protobuf_ShutdownFile_errors_2eproto();

  void InitAsDefaultInstance();
  static ReadWithinUncertaintyIntervalError* default_instance_;
};
// -------------------------------------------------------------------

class TransactionAbortedError : public ::google::protobuf::Message {
 public:
  TransactionAbortedError();
  virtual ~TransactionAbortedError();

  TransactionAbortedError(const TransactionAbortedError& from);

  inline TransactionAbortedError& operator=(const TransactionAbortedError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionAbortedError& default_instance();

  void Swap(TransactionAbortedError* other);

  // implements Message ----------------------------------------------

  TransactionAbortedError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransactionAbortedError& from);
  void MergeFrom(const TransactionAbortedError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.Transaction txn = 1;
  inline bool has_txn() const;
  inline void clear_txn();
  static const int kTxnFieldNumber = 1;
  inline const ::proto::Transaction& txn() const;
  inline ::proto::Transaction* mutable_txn();
  inline ::proto::Transaction* release_txn();
  inline void set_allocated_txn(::proto::Transaction* txn);

  // @@protoc_insertion_point(class_scope:proto.TransactionAbortedError)
 private:
  inline void set_has_txn();
  inline void clear_has_txn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::proto::Transaction* txn_;
  friend void  protobuf_AddDesc_errors_2eproto();
  friend void protobuf_AssignDesc_errors_2eproto();
  friend void protobuf_ShutdownFile_errors_2eproto();

  void InitAsDefaultInstance();
  static TransactionAbortedError* default_instance_;
};
// -------------------------------------------------------------------

class TransactionPushError : public ::google::protobuf::Message {
 public:
  TransactionPushError();
  virtual ~TransactionPushError();

  TransactionPushError(const TransactionPushError& from);

  inline TransactionPushError& operator=(const TransactionPushError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionPushError& default_instance();

  void Swap(TransactionPushError* other);

  // implements Message ----------------------------------------------

  TransactionPushError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransactionPushError& from);
  void MergeFrom(const TransactionPushError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.Transaction txn = 1;
  inline bool has_txn() const;
  inline void clear_txn();
  static const int kTxnFieldNumber = 1;
  inline const ::proto::Transaction& txn() const;
  inline ::proto::Transaction* mutable_txn();
  inline ::proto::Transaction* release_txn();
  inline void set_allocated_txn(::proto::Transaction* txn);

  // optional .proto.Transaction pushee_txn = 2;
  inline bool has_pushee_txn() const;
  inline void clear_pushee_txn();
  static const int kPusheeTxnFieldNumber = 2;
  inline const ::proto::Transaction& pushee_txn() const;
  inline ::proto::Transaction* mutable_pushee_txn();
  inline ::proto::Transaction* release_pushee_txn();
  inline void set_allocated_pushee_txn(::proto::Transaction* pushee_txn);

  // @@protoc_insertion_point(class_scope:proto.TransactionPushError)
 private:
  inline void set_has_txn();
  inline void clear_has_txn();
  inline void set_has_pushee_txn();
  inline void clear_has_pushee_txn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::proto::Transaction* txn_;
  ::proto::Transaction* pushee_txn_;
  friend void  protobuf_AddDesc_errors_2eproto();
  friend void protobuf_AssignDesc_errors_2eproto();
  friend void protobuf_ShutdownFile_errors_2eproto();

  void InitAsDefaultInstance();
  static TransactionPushError* default_instance_;
};
// -------------------------------------------------------------------

class TransactionRetryError : public ::google::protobuf::Message {
 public:
  TransactionRetryError();
  virtual ~TransactionRetryError();

  TransactionRetryError(const TransactionRetryError& from);

  inline TransactionRetryError& operator=(const TransactionRetryError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionRetryError& default_instance();

  void Swap(TransactionRetryError* other);

  // implements Message ----------------------------------------------

  TransactionRetryError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransactionRetryError& from);
  void MergeFrom(const TransactionRetryError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.Transaction txn = 1;
  inline bool has_txn() const;
  inline void clear_txn();
  static const int kTxnFieldNumber = 1;
  inline const ::proto::Transaction& txn() const;
  inline ::proto::Transaction* mutable_txn();
  inline ::proto::Transaction* release_txn();
  inline void set_allocated_txn(::proto::Transaction* txn);

  // @@protoc_insertion_point(class_scope:proto.TransactionRetryError)
 private:
  inline void set_has_txn();
  inline void clear_has_txn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::proto::Transaction* txn_;
  friend void  protobuf_AddDesc_errors_2eproto();
  friend void protobuf_AssignDesc_errors_2eproto();
  friend void protobuf_ShutdownFile_errors_2eproto();

  void InitAsDefaultInstance();
  static TransactionRetryError* default_instance_;
};
// -------------------------------------------------------------------

class TransactionStatusError : public ::google::protobuf::Message {
 public:
  TransactionStatusError();
  virtual ~TransactionStatusError();

  TransactionStatusError(const TransactionStatusError& from);

  inline TransactionStatusError& operator=(const TransactionStatusError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionStatusError& default_instance();

  void Swap(TransactionStatusError* other);

  // implements Message ----------------------------------------------

  TransactionStatusError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransactionStatusError& from);
  void MergeFrom(const TransactionStatusError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.Transaction txn = 1;
  inline bool has_txn() const;
  inline void clear_txn();
  static const int kTxnFieldNumber = 1;
  inline const ::proto::Transaction& txn() const;
  inline ::proto::Transaction* mutable_txn();
  inline ::proto::Transaction* release_txn();
  inline void set_allocated_txn(::proto::Transaction* txn);

  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:proto.TransactionStatusError)
 private:
  inline void set_has_txn();
  inline void clear_has_txn();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::proto::Transaction* txn_;
  ::std::string* msg_;
  friend void  protobuf_AddDesc_errors_2eproto();
  friend void protobuf_AssignDesc_errors_2eproto();
  friend void protobuf_ShutdownFile_errors_2eproto();

  void InitAsDefaultInstance();
  static TransactionStatusError* default_instance_;
};
// -------------------------------------------------------------------

class WriteIntentError : public ::google::protobuf::Message {
 public:
  WriteIntentError();
  virtual ~WriteIntentError();

  WriteIntentError(const WriteIntentError& from);

  inline WriteIntentError& operator=(const WriteIntentError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteIntentError& default_instance();

  void Swap(WriteIntentError* other);

  // implements Message ----------------------------------------------

  WriteIntentError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteIntentError& from);
  void MergeFrom(const WriteIntentError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional .proto.Transaction txn = 2;
  inline bool has_txn() const;
  inline void clear_txn();
  static const int kTxnFieldNumber = 2;
  inline const ::proto::Transaction& txn() const;
  inline ::proto::Transaction* mutable_txn();
  inline ::proto::Transaction* release_txn();
  inline void set_allocated_txn(::proto::Transaction* txn);

  // optional bool resolved = 3;
  inline bool has_resolved() const;
  inline void clear_resolved();
  static const int kResolvedFieldNumber = 3;
  inline bool resolved() const;
  inline void set_resolved(bool value);

  // @@protoc_insertion_point(class_scope:proto.WriteIntentError)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_txn();
  inline void clear_has_txn();
  inline void set_has_resolved();
  inline void clear_has_resolved();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::proto::Transaction* txn_;
  bool resolved_;
  friend void  protobuf_AddDesc_errors_2eproto();
  friend void protobuf_AssignDesc_errors_2eproto();
  friend void protobuf_ShutdownFile_errors_2eproto();

  void InitAsDefaultInstance();
  static WriteIntentError* default_instance_;
};
// -------------------------------------------------------------------

class WriteTooOldError : public ::google::protobuf::Message {
 public:
  WriteTooOldError();
  virtual ~WriteTooOldError();

  WriteTooOldError(const WriteTooOldError& from);

  inline WriteTooOldError& operator=(const WriteTooOldError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteTooOldError& default_instance();

  void Swap(WriteTooOldError* other);

  // implements Message ----------------------------------------------

  WriteTooOldError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteTooOldError& from);
  void MergeFrom(const WriteTooOldError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.Timestamp timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline const ::proto::Timestamp& timestamp() const;
  inline ::proto::Timestamp* mutable_timestamp();
  inline ::proto::Timestamp* release_timestamp();
  inline void set_allocated_timestamp(::proto::Timestamp* timestamp);

  // optional .proto.Timestamp existing_timestamp = 2;
  inline bool has_existing_timestamp() const;
  inline void clear_existing_timestamp();
  static const int kExistingTimestampFieldNumber = 2;
  inline const ::proto::Timestamp& existing_timestamp() const;
  inline ::proto::Timestamp* mutable_existing_timestamp();
  inline ::proto::Timestamp* release_existing_timestamp();
  inline void set_allocated_existing_timestamp(::proto::Timestamp* existing_timestamp);

  // @@protoc_insertion_point(class_scope:proto.WriteTooOldError)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_existing_timestamp();
  inline void clear_has_existing_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::proto::Timestamp* timestamp_;
  ::proto::Timestamp* existing_timestamp_;
  friend void  protobuf_AddDesc_errors_2eproto();
  friend void protobuf_AssignDesc_errors_2eproto();
  friend void protobuf_ShutdownFile_errors_2eproto();

  void InitAsDefaultInstance();
  static WriteTooOldError* default_instance_;
};
// -------------------------------------------------------------------

class OpRequiresTxnError : public ::google::protobuf::Message {
 public:
  OpRequiresTxnError();
  virtual ~OpRequiresTxnError();

  OpRequiresTxnError(const OpRequiresTxnError& from);

  inline OpRequiresTxnError& operator=(const OpRequiresTxnError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpRequiresTxnError& default_instance();

  void Swap(OpRequiresTxnError* other);

  // implements Message ----------------------------------------------

  OpRequiresTxnError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpRequiresTxnError& from);
  void MergeFrom(const OpRequiresTxnError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.OpRequiresTxnError)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_errors_2eproto();
  friend void protobuf_AssignDesc_errors_2eproto();
  friend void protobuf_ShutdownFile_errors_2eproto();

  void InitAsDefaultInstance();
  static OpRequiresTxnError* default_instance_;
};
// -------------------------------------------------------------------

class ConditionFailedError : public ::google::protobuf::Message {
 public:
  ConditionFailedError();
  virtual ~ConditionFailedError();

  ConditionFailedError(const ConditionFailedError& from);

  inline ConditionFailedError& operator=(const ConditionFailedError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionFailedError& default_instance();

  void Swap(ConditionFailedError* other);

  // implements Message ----------------------------------------------

  ConditionFailedError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConditionFailedError& from);
  void MergeFrom(const ConditionFailedError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.Value actual_value = 1;
  inline bool has_actual_value() const;
  inline void clear_actual_value();
  static const int kActualValueFieldNumber = 1;
  inline const ::proto::Value& actual_value() const;
  inline ::proto::Value* mutable_actual_value();
  inline ::proto::Value* release_actual_value();
  inline void set_allocated_actual_value(::proto::Value* actual_value);

  // @@protoc_insertion_point(class_scope:proto.ConditionFailedError)
 private:
  inline void set_has_actual_value();
  inline void clear_has_actual_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::proto::Value* actual_value_;
  friend void  protobuf_AddDesc_errors_2eproto();
  friend void protobuf_AssignDesc_errors_2eproto();
  friend void protobuf_ShutdownFile_errors_2eproto();

  void InitAsDefaultInstance();
  static ConditionFailedError* default_instance_;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  void Swap(Error* other);

  // implements Message ----------------------------------------------

  Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.GenericError generic = 1;
  inline bool has_generic() const;
  inline void clear_generic();
  static const int kGenericFieldNumber = 1;
  inline const ::proto::GenericError& generic() const;
  inline ::proto::GenericError* mutable_generic();
  inline ::proto::GenericError* release_generic();
  inline void set_allocated_generic(::proto::GenericError* generic);

  // optional .proto.NotLeaderError not_leader = 2;
  inline bool has_not_leader() const;
  inline void clear_not_leader();
  static const int kNotLeaderFieldNumber = 2;
  inline const ::proto::NotLeaderError& not_leader() const;
  inline ::proto::NotLeaderError* mutable_not_leader();
  inline ::proto::NotLeaderError* release_not_leader();
  inline void set_allocated_not_leader(::proto::NotLeaderError* not_leader);

  // optional .proto.RangeNotFoundError range_not_found = 3;
  inline bool has_range_not_found() const;
  inline void clear_range_not_found();
  static const int kRangeNotFoundFieldNumber = 3;
  inline const ::proto::RangeNotFoundError& range_not_found() const;
  inline ::proto::RangeNotFoundError* mutable_range_not_found();
  inline ::proto::RangeNotFoundError* release_range_not_found();
  inline void set_allocated_range_not_found(::proto::RangeNotFoundError* range_not_found);

  // optional .proto.RangeKeyMismatchError range_key_mismatch = 4;
  inline bool has_range_key_mismatch() const;
  inline void clear_range_key_mismatch();
  static const int kRangeKeyMismatchFieldNumber = 4;
  inline const ::proto::RangeKeyMismatchError& range_key_mismatch() const;
  inline ::proto::RangeKeyMismatchError* mutable_range_key_mismatch();
  inline ::proto::RangeKeyMismatchError* release_range_key_mismatch();
  inline void set_allocated_range_key_mismatch(::proto::RangeKeyMismatchError* range_key_mismatch);

  // optional .proto.ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 5;
  inline bool has_read_within_uncertainty_interval() const;
  inline void clear_read_within_uncertainty_interval();
  static const int kReadWithinUncertaintyIntervalFieldNumber = 5;
  inline const ::proto::ReadWithinUncertaintyIntervalError& read_within_uncertainty_interval() const;
  inline ::proto::ReadWithinUncertaintyIntervalError* mutable_read_within_uncertainty_interval();
  inline ::proto::ReadWithinUncertaintyIntervalError* release_read_within_uncertainty_interval();
  inline void set_allocated_read_within_uncertainty_interval(::proto::ReadWithinUncertaintyIntervalError* read_within_uncertainty_interval);

  // optional .proto.TransactionAbortedError transaction_aborted = 6;
  inline bool has_transaction_aborted() const;
  inline void clear_transaction_aborted();
  static const int kTransactionAbortedFieldNumber = 6;
  inline const ::proto::TransactionAbortedError& transaction_aborted() const;
  inline ::proto::TransactionAbortedError* mutable_transaction_aborted();
  inline ::proto::TransactionAbortedError* release_transaction_aborted();
  inline void set_allocated_transaction_aborted(::proto::TransactionAbortedError* transaction_aborted);

  // optional .proto.TransactionPushError transaction_push = 7;
  inline bool has_transaction_push() const;
  inline void clear_transaction_push();
  static const int kTransactionPushFieldNumber = 7;
  inline const ::proto::TransactionPushError& transaction_push() const;
  inline ::proto::TransactionPushError* mutable_transaction_push();
  inline ::proto::TransactionPushError* release_transaction_push();
  inline void set_allocated_transaction_push(::proto::TransactionPushError* transaction_push);

  // optional .proto.TransactionRetryError transaction_retry = 8;
  inline bool has_transaction_retry() const;
  inline void clear_transaction_retry();
  static const int kTransactionRetryFieldNumber = 8;
  inline const ::proto::TransactionRetryError& transaction_retry() const;
  inline ::proto::TransactionRetryError* mutable_transaction_retry();
  inline ::proto::TransactionRetryError* release_transaction_retry();
  inline void set_allocated_transaction_retry(::proto::TransactionRetryError* transaction_retry);

  // optional .proto.TransactionStatusError transaction_status = 9;
  inline bool has_transaction_status() const;
  inline void clear_transaction_status();
  static const int kTransactionStatusFieldNumber = 9;
  inline const ::proto::TransactionStatusError& transaction_status() const;
  inline ::proto::TransactionStatusError* mutable_transaction_status();
  inline ::proto::TransactionStatusError* release_transaction_status();
  inline void set_allocated_transaction_status(::proto::TransactionStatusError* transaction_status);

  // optional .proto.WriteIntentError write_intent = 10;
  inline bool has_write_intent() const;
  inline void clear_write_intent();
  static const int kWriteIntentFieldNumber = 10;
  inline const ::proto::WriteIntentError& write_intent() const;
  inline ::proto::WriteIntentError* mutable_write_intent();
  inline ::proto::WriteIntentError* release_write_intent();
  inline void set_allocated_write_intent(::proto::WriteIntentError* write_intent);

  // optional .proto.WriteTooOldError write_too_old = 11;
  inline bool has_write_too_old() const;
  inline void clear_write_too_old();
  static const int kWriteTooOldFieldNumber = 11;
  inline const ::proto::WriteTooOldError& write_too_old() const;
  inline ::proto::WriteTooOldError* mutable_write_too_old();
  inline ::proto::WriteTooOldError* release_write_too_old();
  inline void set_allocated_write_too_old(::proto::WriteTooOldError* write_too_old);

  // optional .proto.OpRequiresTxnError op_requires_txn = 12;
  inline bool has_op_requires_txn() const;
  inline void clear_op_requires_txn();
  static const int kOpRequiresTxnFieldNumber = 12;
  inline const ::proto::OpRequiresTxnError& op_requires_txn() const;
  inline ::proto::OpRequiresTxnError* mutable_op_requires_txn();
  inline ::proto::OpRequiresTxnError* release_op_requires_txn();
  inline void set_allocated_op_requires_txn(::proto::OpRequiresTxnError* op_requires_txn);

  // optional .proto.ConditionFailedError condition_failed = 13;
  inline bool has_condition_failed() const;
  inline void clear_condition_failed();
  static const int kConditionFailedFieldNumber = 13;
  inline const ::proto::ConditionFailedError& condition_failed() const;
  inline ::proto::ConditionFailedError* mutable_condition_failed();
  inline ::proto::ConditionFailedError* release_condition_failed();
  inline void set_allocated_condition_failed(::proto::ConditionFailedError* condition_failed);

  // @@protoc_insertion_point(class_scope:proto.Error)
 private:
  inline void set_has_generic();
  inline void clear_has_generic();
  inline void set_has_not_leader();
  inline void clear_has_not_leader();
  inline void set_has_range_not_found();
  inline void clear_has_range_not_found();
  inline void set_has_range_key_mismatch();
  inline void clear_has_range_key_mismatch();
  inline void set_has_read_within_uncertainty_interval();
  inline void clear_has_read_within_uncertainty_interval();
  inline void set_has_transaction_aborted();
  inline void clear_has_transaction_aborted();
  inline void set_has_transaction_push();
  inline void clear_has_transaction_push();
  inline void set_has_transaction_retry();
  inline void clear_has_transaction_retry();
  inline void set_has_transaction_status();
  inline void clear_has_transaction_status();
  inline void set_has_write_intent();
  inline void clear_has_write_intent();
  inline void set_has_write_too_old();
  inline void clear_has_write_too_old();
  inline void set_has_op_requires_txn();
  inline void clear_has_op_requires_txn();
  inline void set_has_condition_failed();
  inline void clear_has_condition_failed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::proto::GenericError* generic_;
  ::proto::NotLeaderError* not_leader_;
  ::proto::RangeNotFoundError* range_not_found_;
  ::proto::RangeKeyMismatchError* range_key_mismatch_;
  ::proto::ReadWithinUncertaintyIntervalError* read_within_uncertainty_interval_;
  ::proto::TransactionAbortedError* transaction_aborted_;
  ::proto::TransactionPushError* transaction_push_;
  ::proto::TransactionRetryError* transaction_retry_;
  ::proto::TransactionStatusError* transaction_status_;
  ::proto::WriteIntentError* write_intent_;
  ::proto::WriteTooOldError* write_too_old_;
  ::proto::OpRequiresTxnError* op_requires_txn_;
  ::proto::ConditionFailedError* condition_failed_;
  friend void  protobuf_AddDesc_errors_2eproto();
  friend void protobuf_AssignDesc_errors_2eproto();
  friend void protobuf_ShutdownFile_errors_2eproto();

  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// ===================================================================


// ===================================================================

// GenericError

// optional string message = 1;
inline bool GenericError::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GenericError::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GenericError::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GenericError::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& GenericError::message() const {
  // @@protoc_insertion_point(field_get:proto.GenericError.message)
  return *message_;
}
inline void GenericError::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:proto.GenericError.message)
}
inline void GenericError::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.GenericError.message)
}
inline void GenericError::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.GenericError.message)
}
inline ::std::string* GenericError::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.GenericError.message)
  return message_;
}
inline ::std::string* GenericError::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GenericError::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GenericError.message)
}

// optional bool retryable = 2;
inline bool GenericError::has_retryable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GenericError::set_has_retryable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GenericError::clear_has_retryable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GenericError::clear_retryable() {
  retryable_ = false;
  clear_has_retryable();
}
inline bool GenericError::retryable() const {
  // @@protoc_insertion_point(field_get:proto.GenericError.retryable)
  return retryable_;
}
inline void GenericError::set_retryable(bool value) {
  set_has_retryable();
  retryable_ = value;
  // @@protoc_insertion_point(field_set:proto.GenericError.retryable)
}

// -------------------------------------------------------------------

// NotLeaderError

// optional .proto.Replica leader = 1;
inline bool NotLeaderError::has_leader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotLeaderError::set_has_leader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotLeaderError::clear_has_leader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotLeaderError::clear_leader() {
  if (leader_ != NULL) leader_->::proto::Replica::Clear();
  clear_has_leader();
}
inline const ::proto::Replica& NotLeaderError::leader() const {
  // @@protoc_insertion_point(field_get:proto.NotLeaderError.leader)
  return leader_ != NULL ? *leader_ : *default_instance_->leader_;
}
inline ::proto::Replica* NotLeaderError::mutable_leader() {
  set_has_leader();
  if (leader_ == NULL) leader_ = new ::proto::Replica;
  // @@protoc_insertion_point(field_mutable:proto.NotLeaderError.leader)
  return leader_;
}
inline ::proto::Replica* NotLeaderError::release_leader() {
  clear_has_leader();
  ::proto::Replica* temp = leader_;
  leader_ = NULL;
  return temp;
}
inline void NotLeaderError::set_allocated_leader(::proto::Replica* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    set_has_leader();
  } else {
    clear_has_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.NotLeaderError.leader)
}

// -------------------------------------------------------------------

// RangeNotFoundError

// optional int64 raft_id = 1;
inline bool RangeNotFoundError::has_raft_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeNotFoundError::set_has_raft_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RangeNotFoundError::clear_has_raft_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RangeNotFoundError::clear_raft_id() {
  raft_id_ = GOOGLE_LONGLONG(0);
  clear_has_raft_id();
}
inline ::google::protobuf::int64 RangeNotFoundError::raft_id() const {
  // @@protoc_insertion_point(field_get:proto.RangeNotFoundError.raft_id)
  return raft_id_;
}
inline void RangeNotFoundError::set_raft_id(::google::protobuf::int64 value) {
  set_has_raft_id();
  raft_id_ = value;
  // @@protoc_insertion_point(field_set:proto.RangeNotFoundError.raft_id)
}

// -------------------------------------------------------------------

// RangeKeyMismatchError

// optional bytes request_start_key = 1;
inline bool RangeKeyMismatchError::has_request_start_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeKeyMismatchError::set_has_request_start_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RangeKeyMismatchError::clear_has_request_start_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RangeKeyMismatchError::clear_request_start_key() {
  if (request_start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_start_key_->clear();
  }
  clear_has_request_start_key();
}
inline const ::std::string& RangeKeyMismatchError::request_start_key() const {
  // @@protoc_insertion_point(field_get:proto.RangeKeyMismatchError.request_start_key)
  return *request_start_key_;
}
inline void RangeKeyMismatchError::set_request_start_key(const ::std::string& value) {
  set_has_request_start_key();
  if (request_start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_start_key_ = new ::std::string;
  }
  request_start_key_->assign(value);
  // @@protoc_insertion_point(field_set:proto.RangeKeyMismatchError.request_start_key)
}
inline void RangeKeyMismatchError::set_request_start_key(const char* value) {
  set_has_request_start_key();
  if (request_start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_start_key_ = new ::std::string;
  }
  request_start_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.RangeKeyMismatchError.request_start_key)
}
inline void RangeKeyMismatchError::set_request_start_key(const void* value, size_t size) {
  set_has_request_start_key();
  if (request_start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_start_key_ = new ::std::string;
  }
  request_start_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.RangeKeyMismatchError.request_start_key)
}
inline ::std::string* RangeKeyMismatchError::mutable_request_start_key() {
  set_has_request_start_key();
  if (request_start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_start_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.RangeKeyMismatchError.request_start_key)
  return request_start_key_;
}
inline ::std::string* RangeKeyMismatchError::release_request_start_key() {
  clear_has_request_start_key();
  if (request_start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = request_start_key_;
    request_start_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RangeKeyMismatchError::set_allocated_request_start_key(::std::string* request_start_key) {
  if (request_start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_start_key_;
  }
  if (request_start_key) {
    set_has_request_start_key();
    request_start_key_ = request_start_key;
  } else {
    clear_has_request_start_key();
    request_start_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RangeKeyMismatchError.request_start_key)
}

// optional bytes request_end_key = 2;
inline bool RangeKeyMismatchError::has_request_end_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RangeKeyMismatchError::set_has_request_end_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RangeKeyMismatchError::clear_has_request_end_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RangeKeyMismatchError::clear_request_end_key() {
  if (request_end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_end_key_->clear();
  }
  clear_has_request_end_key();
}
inline const ::std::string& RangeKeyMismatchError::request_end_key() const {
  // @@protoc_insertion_point(field_get:proto.RangeKeyMismatchError.request_end_key)
  return *request_end_key_;
}
inline void RangeKeyMismatchError::set_request_end_key(const ::std::string& value) {
  set_has_request_end_key();
  if (request_end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_end_key_ = new ::std::string;
  }
  request_end_key_->assign(value);
  // @@protoc_insertion_point(field_set:proto.RangeKeyMismatchError.request_end_key)
}
inline void RangeKeyMismatchError::set_request_end_key(const char* value) {
  set_has_request_end_key();
  if (request_end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_end_key_ = new ::std::string;
  }
  request_end_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.RangeKeyMismatchError.request_end_key)
}
inline void RangeKeyMismatchError::set_request_end_key(const void* value, size_t size) {
  set_has_request_end_key();
  if (request_end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_end_key_ = new ::std::string;
  }
  request_end_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.RangeKeyMismatchError.request_end_key)
}
inline ::std::string* RangeKeyMismatchError::mutable_request_end_key() {
  set_has_request_end_key();
  if (request_end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_end_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.RangeKeyMismatchError.request_end_key)
  return request_end_key_;
}
inline ::std::string* RangeKeyMismatchError::release_request_end_key() {
  clear_has_request_end_key();
  if (request_end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = request_end_key_;
    request_end_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RangeKeyMismatchError::set_allocated_request_end_key(::std::string* request_end_key) {
  if (request_end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_end_key_;
  }
  if (request_end_key) {
    set_has_request_end_key();
    request_end_key_ = request_end_key;
  } else {
    clear_has_request_end_key();
    request_end_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RangeKeyMismatchError.request_end_key)
}

// optional .proto.RangeDescriptor range = 3;
inline bool RangeKeyMismatchError::has_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RangeKeyMismatchError::set_has_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RangeKeyMismatchError::clear_has_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RangeKeyMismatchError::clear_range() {
  if (range_ != NULL) range_->::proto::RangeDescriptor::Clear();
  clear_has_range();
}
inline const ::proto::RangeDescriptor& RangeKeyMismatchError::range() const {
  // @@protoc_insertion_point(field_get:proto.RangeKeyMismatchError.range)
  return range_ != NULL ? *range_ : *default_instance_->range_;
}
inline ::proto::RangeDescriptor* RangeKeyMismatchError::mutable_range() {
  set_has_range();
  if (range_ == NULL) range_ = new ::proto::RangeDescriptor;
  // @@protoc_insertion_point(field_mutable:proto.RangeKeyMismatchError.range)
  return range_;
}
inline ::proto::RangeDescriptor* RangeKeyMismatchError::release_range() {
  clear_has_range();
  ::proto::RangeDescriptor* temp = range_;
  range_ = NULL;
  return temp;
}
inline void RangeKeyMismatchError::set_allocated_range(::proto::RangeDescriptor* range) {
  delete range_;
  range_ = range;
  if (range) {
    set_has_range();
  } else {
    clear_has_range();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RangeKeyMismatchError.range)
}

// -------------------------------------------------------------------

// ReadWithinUncertaintyIntervalError

// optional .proto.Timestamp timestamp = 1;
inline bool ReadWithinUncertaintyIntervalError::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadWithinUncertaintyIntervalError::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadWithinUncertaintyIntervalError::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadWithinUncertaintyIntervalError::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::proto::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::proto::Timestamp& ReadWithinUncertaintyIntervalError::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.ReadWithinUncertaintyIntervalError.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::proto::Timestamp* ReadWithinUncertaintyIntervalError::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:proto.ReadWithinUncertaintyIntervalError.timestamp)
  return timestamp_;
}
inline ::proto::Timestamp* ReadWithinUncertaintyIntervalError::release_timestamp() {
  clear_has_timestamp();
  ::proto::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void ReadWithinUncertaintyIntervalError::set_allocated_timestamp(::proto::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ReadWithinUncertaintyIntervalError.timestamp)
}

// optional .proto.Timestamp existing_timestamp = 2;
inline bool ReadWithinUncertaintyIntervalError::has_existing_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadWithinUncertaintyIntervalError::set_has_existing_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReadWithinUncertaintyIntervalError::clear_has_existing_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReadWithinUncertaintyIntervalError::clear_existing_timestamp() {
  if (existing_timestamp_ != NULL) existing_timestamp_->::proto::Timestamp::Clear();
  clear_has_existing_timestamp();
}
inline const ::proto::Timestamp& ReadWithinUncertaintyIntervalError::existing_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.ReadWithinUncertaintyIntervalError.existing_timestamp)
  return existing_timestamp_ != NULL ? *existing_timestamp_ : *default_instance_->existing_timestamp_;
}
inline ::proto::Timestamp* ReadWithinUncertaintyIntervalError::mutable_existing_timestamp() {
  set_has_existing_timestamp();
  if (existing_timestamp_ == NULL) existing_timestamp_ = new ::proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:proto.ReadWithinUncertaintyIntervalError.existing_timestamp)
  return existing_timestamp_;
}
inline ::proto::Timestamp* ReadWithinUncertaintyIntervalError::release_existing_timestamp() {
  clear_has_existing_timestamp();
  ::proto::Timestamp* temp = existing_timestamp_;
  existing_timestamp_ = NULL;
  return temp;
}
inline void ReadWithinUncertaintyIntervalError::set_allocated_existing_timestamp(::proto::Timestamp* existing_timestamp) {
  delete existing_timestamp_;
  existing_timestamp_ = existing_timestamp;
  if (existing_timestamp) {
    set_has_existing_timestamp();
  } else {
    clear_has_existing_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ReadWithinUncertaintyIntervalError.existing_timestamp)
}

// -------------------------------------------------------------------

// TransactionAbortedError

// optional .proto.Transaction txn = 1;
inline bool TransactionAbortedError::has_txn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionAbortedError::set_has_txn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionAbortedError::clear_has_txn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionAbortedError::clear_txn() {
  if (txn_ != NULL) txn_->::proto::Transaction::Clear();
  clear_has_txn();
}
inline const ::proto::Transaction& TransactionAbortedError::txn() const {
  // @@protoc_insertion_point(field_get:proto.TransactionAbortedError.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::proto::Transaction* TransactionAbortedError::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) txn_ = new ::proto::Transaction;
  // @@protoc_insertion_point(field_mutable:proto.TransactionAbortedError.txn)
  return txn_;
}
inline ::proto::Transaction* TransactionAbortedError::release_txn() {
  clear_has_txn();
  ::proto::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void TransactionAbortedError::set_allocated_txn(::proto::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionAbortedError.txn)
}

// -------------------------------------------------------------------

// TransactionPushError

// optional .proto.Transaction txn = 1;
inline bool TransactionPushError::has_txn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionPushError::set_has_txn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionPushError::clear_has_txn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionPushError::clear_txn() {
  if (txn_ != NULL) txn_->::proto::Transaction::Clear();
  clear_has_txn();
}
inline const ::proto::Transaction& TransactionPushError::txn() const {
  // @@protoc_insertion_point(field_get:proto.TransactionPushError.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::proto::Transaction* TransactionPushError::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) txn_ = new ::proto::Transaction;
  // @@protoc_insertion_point(field_mutable:proto.TransactionPushError.txn)
  return txn_;
}
inline ::proto::Transaction* TransactionPushError::release_txn() {
  clear_has_txn();
  ::proto::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void TransactionPushError::set_allocated_txn(::proto::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionPushError.txn)
}

// optional .proto.Transaction pushee_txn = 2;
inline bool TransactionPushError::has_pushee_txn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransactionPushError::set_has_pushee_txn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransactionPushError::clear_has_pushee_txn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransactionPushError::clear_pushee_txn() {
  if (pushee_txn_ != NULL) pushee_txn_->::proto::Transaction::Clear();
  clear_has_pushee_txn();
}
inline const ::proto::Transaction& TransactionPushError::pushee_txn() const {
  // @@protoc_insertion_point(field_get:proto.TransactionPushError.pushee_txn)
  return pushee_txn_ != NULL ? *pushee_txn_ : *default_instance_->pushee_txn_;
}
inline ::proto::Transaction* TransactionPushError::mutable_pushee_txn() {
  set_has_pushee_txn();
  if (pushee_txn_ == NULL) pushee_txn_ = new ::proto::Transaction;
  // @@protoc_insertion_point(field_mutable:proto.TransactionPushError.pushee_txn)
  return pushee_txn_;
}
inline ::proto::Transaction* TransactionPushError::release_pushee_txn() {
  clear_has_pushee_txn();
  ::proto::Transaction* temp = pushee_txn_;
  pushee_txn_ = NULL;
  return temp;
}
inline void TransactionPushError::set_allocated_pushee_txn(::proto::Transaction* pushee_txn) {
  delete pushee_txn_;
  pushee_txn_ = pushee_txn;
  if (pushee_txn) {
    set_has_pushee_txn();
  } else {
    clear_has_pushee_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionPushError.pushee_txn)
}

// -------------------------------------------------------------------

// TransactionRetryError

// optional .proto.Transaction txn = 1;
inline bool TransactionRetryError::has_txn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionRetryError::set_has_txn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionRetryError::clear_has_txn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionRetryError::clear_txn() {
  if (txn_ != NULL) txn_->::proto::Transaction::Clear();
  clear_has_txn();
}
inline const ::proto::Transaction& TransactionRetryError::txn() const {
  // @@protoc_insertion_point(field_get:proto.TransactionRetryError.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::proto::Transaction* TransactionRetryError::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) txn_ = new ::proto::Transaction;
  // @@protoc_insertion_point(field_mutable:proto.TransactionRetryError.txn)
  return txn_;
}
inline ::proto::Transaction* TransactionRetryError::release_txn() {
  clear_has_txn();
  ::proto::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void TransactionRetryError::set_allocated_txn(::proto::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionRetryError.txn)
}

// -------------------------------------------------------------------

// TransactionStatusError

// optional .proto.Transaction txn = 1;
inline bool TransactionStatusError::has_txn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionStatusError::set_has_txn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionStatusError::clear_has_txn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionStatusError::clear_txn() {
  if (txn_ != NULL) txn_->::proto::Transaction::Clear();
  clear_has_txn();
}
inline const ::proto::Transaction& TransactionStatusError::txn() const {
  // @@protoc_insertion_point(field_get:proto.TransactionStatusError.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::proto::Transaction* TransactionStatusError::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) txn_ = new ::proto::Transaction;
  // @@protoc_insertion_point(field_mutable:proto.TransactionStatusError.txn)
  return txn_;
}
inline ::proto::Transaction* TransactionStatusError::release_txn() {
  clear_has_txn();
  ::proto::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void TransactionStatusError::set_allocated_txn(::proto::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionStatusError.txn)
}

// optional string msg = 2;
inline bool TransactionStatusError::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransactionStatusError::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransactionStatusError::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransactionStatusError::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& TransactionStatusError::msg() const {
  // @@protoc_insertion_point(field_get:proto.TransactionStatusError.msg)
  return *msg_;
}
inline void TransactionStatusError::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:proto.TransactionStatusError.msg)
}
inline void TransactionStatusError::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.TransactionStatusError.msg)
}
inline void TransactionStatusError::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.TransactionStatusError.msg)
}
inline ::std::string* TransactionStatusError::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.TransactionStatusError.msg)
  return msg_;
}
inline ::std::string* TransactionStatusError::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TransactionStatusError::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionStatusError.msg)
}

// -------------------------------------------------------------------

// WriteIntentError

// optional bytes key = 1;
inline bool WriteIntentError::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteIntentError::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WriteIntentError::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WriteIntentError::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& WriteIntentError::key() const {
  // @@protoc_insertion_point(field_get:proto.WriteIntentError.key)
  return *key_;
}
inline void WriteIntentError::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:proto.WriteIntentError.key)
}
inline void WriteIntentError::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.WriteIntentError.key)
}
inline void WriteIntentError::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.WriteIntentError.key)
}
inline ::std::string* WriteIntentError::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.WriteIntentError.key)
  return key_;
}
inline ::std::string* WriteIntentError::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WriteIntentError::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.WriteIntentError.key)
}

// optional .proto.Transaction txn = 2;
inline bool WriteIntentError::has_txn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WriteIntentError::set_has_txn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WriteIntentError::clear_has_txn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WriteIntentError::clear_txn() {
  if (txn_ != NULL) txn_->::proto::Transaction::Clear();
  clear_has_txn();
}
inline const ::proto::Transaction& WriteIntentError::txn() const {
  // @@protoc_insertion_point(field_get:proto.WriteIntentError.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::proto::Transaction* WriteIntentError::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) txn_ = new ::proto::Transaction;
  // @@protoc_insertion_point(field_mutable:proto.WriteIntentError.txn)
  return txn_;
}
inline ::proto::Transaction* WriteIntentError::release_txn() {
  clear_has_txn();
  ::proto::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void WriteIntentError::set_allocated_txn(::proto::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.WriteIntentError.txn)
}

// optional bool resolved = 3;
inline bool WriteIntentError::has_resolved() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WriteIntentError::set_has_resolved() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WriteIntentError::clear_has_resolved() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WriteIntentError::clear_resolved() {
  resolved_ = false;
  clear_has_resolved();
}
inline bool WriteIntentError::resolved() const {
  // @@protoc_insertion_point(field_get:proto.WriteIntentError.resolved)
  return resolved_;
}
inline void WriteIntentError::set_resolved(bool value) {
  set_has_resolved();
  resolved_ = value;
  // @@protoc_insertion_point(field_set:proto.WriteIntentError.resolved)
}

// -------------------------------------------------------------------

// WriteTooOldError

// optional .proto.Timestamp timestamp = 1;
inline bool WriteTooOldError::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteTooOldError::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WriteTooOldError::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WriteTooOldError::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::proto::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::proto::Timestamp& WriteTooOldError::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.WriteTooOldError.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::proto::Timestamp* WriteTooOldError::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:proto.WriteTooOldError.timestamp)
  return timestamp_;
}
inline ::proto::Timestamp* WriteTooOldError::release_timestamp() {
  clear_has_timestamp();
  ::proto::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void WriteTooOldError::set_allocated_timestamp(::proto::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.WriteTooOldError.timestamp)
}

// optional .proto.Timestamp existing_timestamp = 2;
inline bool WriteTooOldError::has_existing_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WriteTooOldError::set_has_existing_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WriteTooOldError::clear_has_existing_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WriteTooOldError::clear_existing_timestamp() {
  if (existing_timestamp_ != NULL) existing_timestamp_->::proto::Timestamp::Clear();
  clear_has_existing_timestamp();
}
inline const ::proto::Timestamp& WriteTooOldError::existing_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.WriteTooOldError.existing_timestamp)
  return existing_timestamp_ != NULL ? *existing_timestamp_ : *default_instance_->existing_timestamp_;
}
inline ::proto::Timestamp* WriteTooOldError::mutable_existing_timestamp() {
  set_has_existing_timestamp();
  if (existing_timestamp_ == NULL) existing_timestamp_ = new ::proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:proto.WriteTooOldError.existing_timestamp)
  return existing_timestamp_;
}
inline ::proto::Timestamp* WriteTooOldError::release_existing_timestamp() {
  clear_has_existing_timestamp();
  ::proto::Timestamp* temp = existing_timestamp_;
  existing_timestamp_ = NULL;
  return temp;
}
inline void WriteTooOldError::set_allocated_existing_timestamp(::proto::Timestamp* existing_timestamp) {
  delete existing_timestamp_;
  existing_timestamp_ = existing_timestamp;
  if (existing_timestamp) {
    set_has_existing_timestamp();
  } else {
    clear_has_existing_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.WriteTooOldError.existing_timestamp)
}

// -------------------------------------------------------------------

// OpRequiresTxnError

// -------------------------------------------------------------------

// ConditionFailedError

// optional .proto.Value actual_value = 1;
inline bool ConditionFailedError::has_actual_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConditionFailedError::set_has_actual_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConditionFailedError::clear_has_actual_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConditionFailedError::clear_actual_value() {
  if (actual_value_ != NULL) actual_value_->::proto::Value::Clear();
  clear_has_actual_value();
}
inline const ::proto::Value& ConditionFailedError::actual_value() const {
  // @@protoc_insertion_point(field_get:proto.ConditionFailedError.actual_value)
  return actual_value_ != NULL ? *actual_value_ : *default_instance_->actual_value_;
}
inline ::proto::Value* ConditionFailedError::mutable_actual_value() {
  set_has_actual_value();
  if (actual_value_ == NULL) actual_value_ = new ::proto::Value;
  // @@protoc_insertion_point(field_mutable:proto.ConditionFailedError.actual_value)
  return actual_value_;
}
inline ::proto::Value* ConditionFailedError::release_actual_value() {
  clear_has_actual_value();
  ::proto::Value* temp = actual_value_;
  actual_value_ = NULL;
  return temp;
}
inline void ConditionFailedError::set_allocated_actual_value(::proto::Value* actual_value) {
  delete actual_value_;
  actual_value_ = actual_value;
  if (actual_value) {
    set_has_actual_value();
  } else {
    clear_has_actual_value();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ConditionFailedError.actual_value)
}

// -------------------------------------------------------------------

// Error

// optional .proto.GenericError generic = 1;
inline bool Error::has_generic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_generic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_generic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_generic() {
  if (generic_ != NULL) generic_->::proto::GenericError::Clear();
  clear_has_generic();
}
inline const ::proto::GenericError& Error::generic() const {
  // @@protoc_insertion_point(field_get:proto.Error.generic)
  return generic_ != NULL ? *generic_ : *default_instance_->generic_;
}
inline ::proto::GenericError* Error::mutable_generic() {
  set_has_generic();
  if (generic_ == NULL) generic_ = new ::proto::GenericError;
  // @@protoc_insertion_point(field_mutable:proto.Error.generic)
  return generic_;
}
inline ::proto::GenericError* Error::release_generic() {
  clear_has_generic();
  ::proto::GenericError* temp = generic_;
  generic_ = NULL;
  return temp;
}
inline void Error::set_allocated_generic(::proto::GenericError* generic) {
  delete generic_;
  generic_ = generic;
  if (generic) {
    set_has_generic();
  } else {
    clear_has_generic();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Error.generic)
}

// optional .proto.NotLeaderError not_leader = 2;
inline bool Error::has_not_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_not_leader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_not_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_not_leader() {
  if (not_leader_ != NULL) not_leader_->::proto::NotLeaderError::Clear();
  clear_has_not_leader();
}
inline const ::proto::NotLeaderError& Error::not_leader() const {
  // @@protoc_insertion_point(field_get:proto.Error.not_leader)
  return not_leader_ != NULL ? *not_leader_ : *default_instance_->not_leader_;
}
inline ::proto::NotLeaderError* Error::mutable_not_leader() {
  set_has_not_leader();
  if (not_leader_ == NULL) not_leader_ = new ::proto::NotLeaderError;
  // @@protoc_insertion_point(field_mutable:proto.Error.not_leader)
  return not_leader_;
}
inline ::proto::NotLeaderError* Error::release_not_leader() {
  clear_has_not_leader();
  ::proto::NotLeaderError* temp = not_leader_;
  not_leader_ = NULL;
  return temp;
}
inline void Error::set_allocated_not_leader(::proto::NotLeaderError* not_leader) {
  delete not_leader_;
  not_leader_ = not_leader;
  if (not_leader) {
    set_has_not_leader();
  } else {
    clear_has_not_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Error.not_leader)
}

// optional .proto.RangeNotFoundError range_not_found = 3;
inline bool Error::has_range_not_found() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Error::set_has_range_not_found() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Error::clear_has_range_not_found() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Error::clear_range_not_found() {
  if (range_not_found_ != NULL) range_not_found_->::proto::RangeNotFoundError::Clear();
  clear_has_range_not_found();
}
inline const ::proto::RangeNotFoundError& Error::range_not_found() const {
  // @@protoc_insertion_point(field_get:proto.Error.range_not_found)
  return range_not_found_ != NULL ? *range_not_found_ : *default_instance_->range_not_found_;
}
inline ::proto::RangeNotFoundError* Error::mutable_range_not_found() {
  set_has_range_not_found();
  if (range_not_found_ == NULL) range_not_found_ = new ::proto::RangeNotFoundError;
  // @@protoc_insertion_point(field_mutable:proto.Error.range_not_found)
  return range_not_found_;
}
inline ::proto::RangeNotFoundError* Error::release_range_not_found() {
  clear_has_range_not_found();
  ::proto::RangeNotFoundError* temp = range_not_found_;
  range_not_found_ = NULL;
  return temp;
}
inline void Error::set_allocated_range_not_found(::proto::RangeNotFoundError* range_not_found) {
  delete range_not_found_;
  range_not_found_ = range_not_found;
  if (range_not_found) {
    set_has_range_not_found();
  } else {
    clear_has_range_not_found();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Error.range_not_found)
}

// optional .proto.RangeKeyMismatchError range_key_mismatch = 4;
inline bool Error::has_range_key_mismatch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Error::set_has_range_key_mismatch() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Error::clear_has_range_key_mismatch() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Error::clear_range_key_mismatch() {
  if (range_key_mismatch_ != NULL) range_key_mismatch_->::proto::RangeKeyMismatchError::Clear();
  clear_has_range_key_mismatch();
}
inline const ::proto::RangeKeyMismatchError& Error::range_key_mismatch() const {
  // @@protoc_insertion_point(field_get:proto.Error.range_key_mismatch)
  return range_key_mismatch_ != NULL ? *range_key_mismatch_ : *default_instance_->range_key_mismatch_;
}
inline ::proto::RangeKeyMismatchError* Error::mutable_range_key_mismatch() {
  set_has_range_key_mismatch();
  if (range_key_mismatch_ == NULL) range_key_mismatch_ = new ::proto::RangeKeyMismatchError;
  // @@protoc_insertion_point(field_mutable:proto.Error.range_key_mismatch)
  return range_key_mismatch_;
}
inline ::proto::RangeKeyMismatchError* Error::release_range_key_mismatch() {
  clear_has_range_key_mismatch();
  ::proto::RangeKeyMismatchError* temp = range_key_mismatch_;
  range_key_mismatch_ = NULL;
  return temp;
}
inline void Error::set_allocated_range_key_mismatch(::proto::RangeKeyMismatchError* range_key_mismatch) {
  delete range_key_mismatch_;
  range_key_mismatch_ = range_key_mismatch;
  if (range_key_mismatch) {
    set_has_range_key_mismatch();
  } else {
    clear_has_range_key_mismatch();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Error.range_key_mismatch)
}

// optional .proto.ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 5;
inline bool Error::has_read_within_uncertainty_interval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Error::set_has_read_within_uncertainty_interval() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Error::clear_has_read_within_uncertainty_interval() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Error::clear_read_within_uncertainty_interval() {
  if (read_within_uncertainty_interval_ != NULL) read_within_uncertainty_interval_->::proto::ReadWithinUncertaintyIntervalError::Clear();
  clear_has_read_within_uncertainty_interval();
}
inline const ::proto::ReadWithinUncertaintyIntervalError& Error::read_within_uncertainty_interval() const {
  // @@protoc_insertion_point(field_get:proto.Error.read_within_uncertainty_interval)
  return read_within_uncertainty_interval_ != NULL ? *read_within_uncertainty_interval_ : *default_instance_->read_within_uncertainty_interval_;
}
inline ::proto::ReadWithinUncertaintyIntervalError* Error::mutable_read_within_uncertainty_interval() {
  set_has_read_within_uncertainty_interval();
  if (read_within_uncertainty_interval_ == NULL) read_within_uncertainty_interval_ = new ::proto::ReadWithinUncertaintyIntervalError;
  // @@protoc_insertion_point(field_mutable:proto.Error.read_within_uncertainty_interval)
  return read_within_uncertainty_interval_;
}
inline ::proto::ReadWithinUncertaintyIntervalError* Error::release_read_within_uncertainty_interval() {
  clear_has_read_within_uncertainty_interval();
  ::proto::ReadWithinUncertaintyIntervalError* temp = read_within_uncertainty_interval_;
  read_within_uncertainty_interval_ = NULL;
  return temp;
}
inline void Error::set_allocated_read_within_uncertainty_interval(::proto::ReadWithinUncertaintyIntervalError* read_within_uncertainty_interval) {
  delete read_within_uncertainty_interval_;
  read_within_uncertainty_interval_ = read_within_uncertainty_interval;
  if (read_within_uncertainty_interval) {
    set_has_read_within_uncertainty_interval();
  } else {
    clear_has_read_within_uncertainty_interval();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Error.read_within_uncertainty_interval)
}

// optional .proto.TransactionAbortedError transaction_aborted = 6;
inline bool Error::has_transaction_aborted() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Error::set_has_transaction_aborted() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Error::clear_has_transaction_aborted() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Error::clear_transaction_aborted() {
  if (transaction_aborted_ != NULL) transaction_aborted_->::proto::TransactionAbortedError::Clear();
  clear_has_transaction_aborted();
}
inline const ::proto::TransactionAbortedError& Error::transaction_aborted() const {
  // @@protoc_insertion_point(field_get:proto.Error.transaction_aborted)
  return transaction_aborted_ != NULL ? *transaction_aborted_ : *default_instance_->transaction_aborted_;
}
inline ::proto::TransactionAbortedError* Error::mutable_transaction_aborted() {
  set_has_transaction_aborted();
  if (transaction_aborted_ == NULL) transaction_aborted_ = new ::proto::TransactionAbortedError;
  // @@protoc_insertion_point(field_mutable:proto.Error.transaction_aborted)
  return transaction_aborted_;
}
inline ::proto::TransactionAbortedError* Error::release_transaction_aborted() {
  clear_has_transaction_aborted();
  ::proto::TransactionAbortedError* temp = transaction_aborted_;
  transaction_aborted_ = NULL;
  return temp;
}
inline void Error::set_allocated_transaction_aborted(::proto::TransactionAbortedError* transaction_aborted) {
  delete transaction_aborted_;
  transaction_aborted_ = transaction_aborted;
  if (transaction_aborted) {
    set_has_transaction_aborted();
  } else {
    clear_has_transaction_aborted();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Error.transaction_aborted)
}

// optional .proto.TransactionPushError transaction_push = 7;
inline bool Error::has_transaction_push() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Error::set_has_transaction_push() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Error::clear_has_transaction_push() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Error::clear_transaction_push() {
  if (transaction_push_ != NULL) transaction_push_->::proto::TransactionPushError::Clear();
  clear_has_transaction_push();
}
inline const ::proto::TransactionPushError& Error::transaction_push() const {
  // @@protoc_insertion_point(field_get:proto.Error.transaction_push)
  return transaction_push_ != NULL ? *transaction_push_ : *default_instance_->transaction_push_;
}
inline ::proto::TransactionPushError* Error::mutable_transaction_push() {
  set_has_transaction_push();
  if (transaction_push_ == NULL) transaction_push_ = new ::proto::TransactionPushError;
  // @@protoc_insertion_point(field_mutable:proto.Error.transaction_push)
  return transaction_push_;
}
inline ::proto::TransactionPushError* Error::release_transaction_push() {
  clear_has_transaction_push();
  ::proto::TransactionPushError* temp = transaction_push_;
  transaction_push_ = NULL;
  return temp;
}
inline void Error::set_allocated_transaction_push(::proto::TransactionPushError* transaction_push) {
  delete transaction_push_;
  transaction_push_ = transaction_push;
  if (transaction_push) {
    set_has_transaction_push();
  } else {
    clear_has_transaction_push();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Error.transaction_push)
}

// optional .proto.TransactionRetryError transaction_retry = 8;
inline bool Error::has_transaction_retry() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Error::set_has_transaction_retry() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Error::clear_has_transaction_retry() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Error::clear_transaction_retry() {
  if (transaction_retry_ != NULL) transaction_retry_->::proto::TransactionRetryError::Clear();
  clear_has_transaction_retry();
}
inline const ::proto::TransactionRetryError& Error::transaction_retry() const {
  // @@protoc_insertion_point(field_get:proto.Error.transaction_retry)
  return transaction_retry_ != NULL ? *transaction_retry_ : *default_instance_->transaction_retry_;
}
inline ::proto::TransactionRetryError* Error::mutable_transaction_retry() {
  set_has_transaction_retry();
  if (transaction_retry_ == NULL) transaction_retry_ = new ::proto::TransactionRetryError;
  // @@protoc_insertion_point(field_mutable:proto.Error.transaction_retry)
  return transaction_retry_;
}
inline ::proto::TransactionRetryError* Error::release_transaction_retry() {
  clear_has_transaction_retry();
  ::proto::TransactionRetryError* temp = transaction_retry_;
  transaction_retry_ = NULL;
  return temp;
}
inline void Error::set_allocated_transaction_retry(::proto::TransactionRetryError* transaction_retry) {
  delete transaction_retry_;
  transaction_retry_ = transaction_retry;
  if (transaction_retry) {
    set_has_transaction_retry();
  } else {
    clear_has_transaction_retry();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Error.transaction_retry)
}

// optional .proto.TransactionStatusError transaction_status = 9;
inline bool Error::has_transaction_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Error::set_has_transaction_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Error::clear_has_transaction_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Error::clear_transaction_status() {
  if (transaction_status_ != NULL) transaction_status_->::proto::TransactionStatusError::Clear();
  clear_has_transaction_status();
}
inline const ::proto::TransactionStatusError& Error::transaction_status() const {
  // @@protoc_insertion_point(field_get:proto.Error.transaction_status)
  return transaction_status_ != NULL ? *transaction_status_ : *default_instance_->transaction_status_;
}
inline ::proto::TransactionStatusError* Error::mutable_transaction_status() {
  set_has_transaction_status();
  if (transaction_status_ == NULL) transaction_status_ = new ::proto::TransactionStatusError;
  // @@protoc_insertion_point(field_mutable:proto.Error.transaction_status)
  return transaction_status_;
}
inline ::proto::TransactionStatusError* Error::release_transaction_status() {
  clear_has_transaction_status();
  ::proto::TransactionStatusError* temp = transaction_status_;
  transaction_status_ = NULL;
  return temp;
}
inline void Error::set_allocated_transaction_status(::proto::TransactionStatusError* transaction_status) {
  delete transaction_status_;
  transaction_status_ = transaction_status;
  if (transaction_status) {
    set_has_transaction_status();
  } else {
    clear_has_transaction_status();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Error.transaction_status)
}

// optional .proto.WriteIntentError write_intent = 10;
inline bool Error::has_write_intent() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Error::set_has_write_intent() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Error::clear_has_write_intent() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Error::clear_write_intent() {
  if (write_intent_ != NULL) write_intent_->::proto::WriteIntentError::Clear();
  clear_has_write_intent();
}
inline const ::proto::WriteIntentError& Error::write_intent() const {
  // @@protoc_insertion_point(field_get:proto.Error.write_intent)
  return write_intent_ != NULL ? *write_intent_ : *default_instance_->write_intent_;
}
inline ::proto::WriteIntentError* Error::mutable_write_intent() {
  set_has_write_intent();
  if (write_intent_ == NULL) write_intent_ = new ::proto::WriteIntentError;
  // @@protoc_insertion_point(field_mutable:proto.Error.write_intent)
  return write_intent_;
}
inline ::proto::WriteIntentError* Error::release_write_intent() {
  clear_has_write_intent();
  ::proto::WriteIntentError* temp = write_intent_;
  write_intent_ = NULL;
  return temp;
}
inline void Error::set_allocated_write_intent(::proto::WriteIntentError* write_intent) {
  delete write_intent_;
  write_intent_ = write_intent;
  if (write_intent) {
    set_has_write_intent();
  } else {
    clear_has_write_intent();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Error.write_intent)
}

// optional .proto.WriteTooOldError write_too_old = 11;
inline bool Error::has_write_too_old() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Error::set_has_write_too_old() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Error::clear_has_write_too_old() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Error::clear_write_too_old() {
  if (write_too_old_ != NULL) write_too_old_->::proto::WriteTooOldError::Clear();
  clear_has_write_too_old();
}
inline const ::proto::WriteTooOldError& Error::write_too_old() const {
  // @@protoc_insertion_point(field_get:proto.Error.write_too_old)
  return write_too_old_ != NULL ? *write_too_old_ : *default_instance_->write_too_old_;
}
inline ::proto::WriteTooOldError* Error::mutable_write_too_old() {
  set_has_write_too_old();
  if (write_too_old_ == NULL) write_too_old_ = new ::proto::WriteTooOldError;
  // @@protoc_insertion_point(field_mutable:proto.Error.write_too_old)
  return write_too_old_;
}
inline ::proto::WriteTooOldError* Error::release_write_too_old() {
  clear_has_write_too_old();
  ::proto::WriteTooOldError* temp = write_too_old_;
  write_too_old_ = NULL;
  return temp;
}
inline void Error::set_allocated_write_too_old(::proto::WriteTooOldError* write_too_old) {
  delete write_too_old_;
  write_too_old_ = write_too_old;
  if (write_too_old) {
    set_has_write_too_old();
  } else {
    clear_has_write_too_old();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Error.write_too_old)
}

// optional .proto.OpRequiresTxnError op_requires_txn = 12;
inline bool Error::has_op_requires_txn() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Error::set_has_op_requires_txn() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Error::clear_has_op_requires_txn() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Error::clear_op_requires_txn() {
  if (op_requires_txn_ != NULL) op_requires_txn_->::proto::OpRequiresTxnError::Clear();
  clear_has_op_requires_txn();
}
inline const ::proto::OpRequiresTxnError& Error::op_requires_txn() const {
  // @@protoc_insertion_point(field_get:proto.Error.op_requires_txn)
  return op_requires_txn_ != NULL ? *op_requires_txn_ : *default_instance_->op_requires_txn_;
}
inline ::proto::OpRequiresTxnError* Error::mutable_op_requires_txn() {
  set_has_op_requires_txn();
  if (op_requires_txn_ == NULL) op_requires_txn_ = new ::proto::OpRequiresTxnError;
  // @@protoc_insertion_point(field_mutable:proto.Error.op_requires_txn)
  return op_requires_txn_;
}
inline ::proto::OpRequiresTxnError* Error::release_op_requires_txn() {
  clear_has_op_requires_txn();
  ::proto::OpRequiresTxnError* temp = op_requires_txn_;
  op_requires_txn_ = NULL;
  return temp;
}
inline void Error::set_allocated_op_requires_txn(::proto::OpRequiresTxnError* op_requires_txn) {
  delete op_requires_txn_;
  op_requires_txn_ = op_requires_txn;
  if (op_requires_txn) {
    set_has_op_requires_txn();
  } else {
    clear_has_op_requires_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Error.op_requires_txn)
}

// optional .proto.ConditionFailedError condition_failed = 13;
inline bool Error::has_condition_failed() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Error::set_has_condition_failed() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Error::clear_has_condition_failed() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Error::clear_condition_failed() {
  if (condition_failed_ != NULL) condition_failed_->::proto::ConditionFailedError::Clear();
  clear_has_condition_failed();
}
inline const ::proto::ConditionFailedError& Error::condition_failed() const {
  // @@protoc_insertion_point(field_get:proto.Error.condition_failed)
  return condition_failed_ != NULL ? *condition_failed_ : *default_instance_->condition_failed_;
}
inline ::proto::ConditionFailedError* Error::mutable_condition_failed() {
  set_has_condition_failed();
  if (condition_failed_ == NULL) condition_failed_ = new ::proto::ConditionFailedError;
  // @@protoc_insertion_point(field_mutable:proto.Error.condition_failed)
  return condition_failed_;
}
inline ::proto::ConditionFailedError* Error::release_condition_failed() {
  clear_has_condition_failed();
  ::proto::ConditionFailedError* temp = condition_failed_;
  condition_failed_ = NULL;
  return temp;
}
inline void Error::set_allocated_condition_failed(::proto::ConditionFailedError* condition_failed) {
  delete condition_failed_;
  condition_failed_ = condition_failed;
  if (condition_failed) {
    set_has_condition_failed();
  } else {
    clear_has_condition_failed();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Error.condition_failed)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_errors_2eproto__INCLUDED
