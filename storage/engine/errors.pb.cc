// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errors.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "errors.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* GenericError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericError_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotLeaderError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotLeaderError_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeNotFoundError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeNotFoundError_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeKeyMismatchError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeKeyMismatchError_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadWithinUncertaintyIntervalError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadWithinUncertaintyIntervalError_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionAbortedError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionAbortedError_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionPushError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionPushError_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionRetryError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionRetryError_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionStatusError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionStatusError_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteIntentError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteIntentError_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteTooOldError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteTooOldError_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpRequiresTxnError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpRequiresTxnError_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConditionFailedError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConditionFailedError_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_errors_2eproto() {
  protobuf_AddDesc_errors_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "errors.proto");
  GOOGLE_CHECK(file != NULL);
  GenericError_descriptor_ = file->message_type(0);
  static const int GenericError_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericError, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericError, retryable_),
  };
  GenericError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenericError_descriptor_,
      GenericError::default_instance_,
      GenericError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenericError));
  NotLeaderError_descriptor_ = file->message_type(1);
  static const int NotLeaderError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeaderError, leader_),
  };
  NotLeaderError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotLeaderError_descriptor_,
      NotLeaderError::default_instance_,
      NotLeaderError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeaderError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeaderError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotLeaderError));
  RangeNotFoundError_descriptor_ = file->message_type(2);
  static const int RangeNotFoundError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeNotFoundError, raft_id_),
  };
  RangeNotFoundError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangeNotFoundError_descriptor_,
      RangeNotFoundError::default_instance_,
      RangeNotFoundError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeNotFoundError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeNotFoundError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangeNotFoundError));
  RangeKeyMismatchError_descriptor_ = file->message_type(3);
  static const int RangeKeyMismatchError_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeKeyMismatchError, request_start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeKeyMismatchError, request_end_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeKeyMismatchError, range_),
  };
  RangeKeyMismatchError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangeKeyMismatchError_descriptor_,
      RangeKeyMismatchError::default_instance_,
      RangeKeyMismatchError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeKeyMismatchError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeKeyMismatchError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangeKeyMismatchError));
  ReadWithinUncertaintyIntervalError_descriptor_ = file->message_type(4);
  static const int ReadWithinUncertaintyIntervalError_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWithinUncertaintyIntervalError, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWithinUncertaintyIntervalError, existing_timestamp_),
  };
  ReadWithinUncertaintyIntervalError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadWithinUncertaintyIntervalError_descriptor_,
      ReadWithinUncertaintyIntervalError::default_instance_,
      ReadWithinUncertaintyIntervalError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWithinUncertaintyIntervalError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWithinUncertaintyIntervalError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadWithinUncertaintyIntervalError));
  TransactionAbortedError_descriptor_ = file->message_type(5);
  static const int TransactionAbortedError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionAbortedError, txn_),
  };
  TransactionAbortedError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionAbortedError_descriptor_,
      TransactionAbortedError::default_instance_,
      TransactionAbortedError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionAbortedError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionAbortedError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionAbortedError));
  TransactionPushError_descriptor_ = file->message_type(6);
  static const int TransactionPushError_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPushError, txn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPushError, pushee_txn_),
  };
  TransactionPushError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionPushError_descriptor_,
      TransactionPushError::default_instance_,
      TransactionPushError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPushError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPushError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionPushError));
  TransactionRetryError_descriptor_ = file->message_type(7);
  static const int TransactionRetryError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRetryError, txn_),
  };
  TransactionRetryError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionRetryError_descriptor_,
      TransactionRetryError::default_instance_,
      TransactionRetryError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRetryError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRetryError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionRetryError));
  TransactionStatusError_descriptor_ = file->message_type(8);
  static const int TransactionStatusError_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusError, txn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusError, msg_),
  };
  TransactionStatusError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionStatusError_descriptor_,
      TransactionStatusError::default_instance_,
      TransactionStatusError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionStatusError));
  WriteIntentError_descriptor_ = file->message_type(9);
  static const int WriteIntentError_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteIntentError, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteIntentError, txn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteIntentError, resolved_),
  };
  WriteIntentError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteIntentError_descriptor_,
      WriteIntentError::default_instance_,
      WriteIntentError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteIntentError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteIntentError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteIntentError));
  WriteTooOldError_descriptor_ = file->message_type(10);
  static const int WriteTooOldError_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteTooOldError, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteTooOldError, existing_timestamp_),
  };
  WriteTooOldError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteTooOldError_descriptor_,
      WriteTooOldError::default_instance_,
      WriteTooOldError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteTooOldError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteTooOldError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteTooOldError));
  OpRequiresTxnError_descriptor_ = file->message_type(11);
  static const int OpRequiresTxnError_offsets_[1] = {
  };
  OpRequiresTxnError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpRequiresTxnError_descriptor_,
      OpRequiresTxnError::default_instance_,
      OpRequiresTxnError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpRequiresTxnError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpRequiresTxnError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpRequiresTxnError));
  ConditionFailedError_descriptor_ = file->message_type(12);
  static const int ConditionFailedError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionFailedError, actual_value_),
  };
  ConditionFailedError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConditionFailedError_descriptor_,
      ConditionFailedError::default_instance_,
      ConditionFailedError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionFailedError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionFailedError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConditionFailedError));
  Error_descriptor_ = file->message_type(13);
  static const int Error_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, generic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, not_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, range_not_found_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, range_key_mismatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, read_within_uncertainty_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, transaction_aborted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, transaction_push_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, transaction_retry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, transaction_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, write_intent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, write_too_old_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, op_requires_txn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, condition_failed_),
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_errors_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenericError_descriptor_, &GenericError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotLeaderError_descriptor_, &NotLeaderError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangeNotFoundError_descriptor_, &RangeNotFoundError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangeKeyMismatchError_descriptor_, &RangeKeyMismatchError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadWithinUncertaintyIntervalError_descriptor_, &ReadWithinUncertaintyIntervalError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionAbortedError_descriptor_, &TransactionAbortedError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionPushError_descriptor_, &TransactionPushError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionRetryError_descriptor_, &TransactionRetryError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionStatusError_descriptor_, &TransactionStatusError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteIntentError_descriptor_, &WriteIntentError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteTooOldError_descriptor_, &WriteTooOldError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpRequiresTxnError_descriptor_, &OpRequiresTxnError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConditionFailedError_descriptor_, &ConditionFailedError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_errors_2eproto() {
  delete GenericError::default_instance_;
  delete GenericError_reflection_;
  delete NotLeaderError::default_instance_;
  delete NotLeaderError_reflection_;
  delete RangeNotFoundError::default_instance_;
  delete RangeNotFoundError_reflection_;
  delete RangeKeyMismatchError::default_instance_;
  delete RangeKeyMismatchError_reflection_;
  delete ReadWithinUncertaintyIntervalError::default_instance_;
  delete ReadWithinUncertaintyIntervalError_reflection_;
  delete TransactionAbortedError::default_instance_;
  delete TransactionAbortedError_reflection_;
  delete TransactionPushError::default_instance_;
  delete TransactionPushError_reflection_;
  delete TransactionRetryError::default_instance_;
  delete TransactionRetryError_reflection_;
  delete TransactionStatusError::default_instance_;
  delete TransactionStatusError_reflection_;
  delete WriteIntentError::default_instance_;
  delete WriteIntentError_reflection_;
  delete WriteTooOldError::default_instance_;
  delete WriteTooOldError_reflection_;
  delete OpRequiresTxnError::default_instance_;
  delete OpRequiresTxnError_reflection_;
  delete ConditionFailedError::default_instance_;
  delete ConditionFailedError_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
}

void protobuf_AddDesc_errors_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::protobuf_AddDesc_config_2eproto();
  ::proto::protobuf_AddDesc_data_2eproto();
  ::gogoproto::protobuf_AddDesc_github_2ecom_2fgogo_2fprotobuf_2fgogoproto_2fgogo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014errors.proto\022\005proto\032\014config.proto\032\ndat"
    "a.proto\032-github.com/gogo/protobuf/gogopr"
    "oto/gogo.proto\">\n\014GenericError\022\025\n\007messag"
    "e\030\001 \001(\tB\004\310\336\037\000\022\027\n\tretryable\030\002 \001(\010B\004\310\336\037\000\"6"
    "\n\016NotLeaderError\022$\n\006leader\030\001 \001(\0132\016.proto"
    ".ReplicaB\004\310\336\037\000\"5\n\022RangeNotFoundError\022\037\n\007"
    "raft_id\030\001 \001(\003B\016\310\336\037\000\342\336\037\006RaftID\"\214\001\n\025RangeK"
    "eyMismatchError\022&\n\021request_start_key\030\001 \001"
    "(\014B\013\310\336\037\000\332\336\037\003Key\022$\n\017request_end_key\030\002 \001(\014"
    "B\013\310\336\037\000\332\336\037\003Key\022%\n\005range\030\003 \001(\0132\026.proto.Ran"
    "geDescriptor\"\203\001\n\"ReadWithinUncertaintyIn"
    "tervalError\022)\n\ttimestamp\030\001 \001(\0132\020.proto.T"
    "imestampB\004\310\336\037\000\0222\n\022existing_timestamp\030\002 \001"
    "(\0132\020.proto.TimestampB\004\310\336\037\000\"@\n\027Transactio"
    "nAbortedError\022%\n\003txn\030\001 \001(\0132\022.proto.Trans"
    "actionB\004\310\336\037\000\"e\n\024TransactionPushError\022\037\n\003"
    "txn\030\001 \001(\0132\022.proto.Transaction\022,\n\npushee_"
    "txn\030\002 \001(\0132\022.proto.TransactionB\004\310\336\037\000\">\n\025T"
    "ransactionRetryError\022%\n\003txn\030\001 \001(\0132\022.prot"
    "o.TransactionB\004\310\336\037\000\"R\n\026TransactionStatus"
    "Error\022%\n\003txn\030\001 \001(\0132\022.proto.TransactionB\004"
    "\310\336\037\000\022\021\n\003msg\030\002 \001(\tB\004\310\336\037\000\"k\n\020WriteIntentEr"
    "ror\022\030\n\003key\030\001 \001(\014B\013\310\336\037\000\332\336\037\003Key\022%\n\003txn\030\002 \001"
    "(\0132\022.proto.TransactionB\004\310\336\037\000\022\026\n\010resolved"
    "\030\003 \001(\010B\004\310\336\037\000\"q\n\020WriteTooOldError\022)\n\ttime"
    "stamp\030\001 \001(\0132\020.proto.TimestampB\004\310\336\037\000\0222\n\022e"
    "xisting_timestamp\030\002 \001(\0132\020.proto.Timestam"
    "pB\004\310\336\037\000\"\024\n\022OpRequiresTxnError\":\n\024Conditi"
    "onFailedError\022\"\n\014actual_value\030\001 \001(\0132\014.pr"
    "oto.Value\"\323\005\n\005Error\022$\n\007generic\030\001 \001(\0132\023.p"
    "roto.GenericError\022)\n\nnot_leader\030\002 \001(\0132\025."
    "proto.NotLeaderError\0222\n\017range_not_found\030"
    "\003 \001(\0132\031.proto.RangeNotFoundError\0228\n\022rang"
    "e_key_mismatch\030\004 \001(\0132\034.proto.RangeKeyMis"
    "matchError\022S\n read_within_uncertainty_in"
    "terval\030\005 \001(\0132).proto.ReadWithinUncertain"
    "tyIntervalError\022;\n\023transaction_aborted\030\006"
    " \001(\0132\036.proto.TransactionAbortedError\0225\n\020"
    "transaction_push\030\007 \001(\0132\033.proto.Transacti"
    "onPushError\0227\n\021transaction_retry\030\010 \001(\0132\034"
    ".proto.TransactionRetryError\0229\n\022transact"
    "ion_status\030\t \001(\0132\035.proto.TransactionStat"
    "usError\022-\n\014write_intent\030\n \001(\0132\027.proto.Wr"
    "iteIntentError\022.\n\rwrite_too_old\030\013 \001(\0132\027."
    "proto.WriteTooOldError\0222\n\017op_requires_tx"
    "n\030\014 \001(\0132\031.proto.OpRequiresTxnError\0225\n\020co"
    "ndition_failed\030\r \001(\0132\033.proto.ConditionFa"
    "iledError:\004\310\240\037\001", 1895);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "errors.proto", &protobuf_RegisterTypes);
  GenericError::default_instance_ = new GenericError();
  NotLeaderError::default_instance_ = new NotLeaderError();
  RangeNotFoundError::default_instance_ = new RangeNotFoundError();
  RangeKeyMismatchError::default_instance_ = new RangeKeyMismatchError();
  ReadWithinUncertaintyIntervalError::default_instance_ = new ReadWithinUncertaintyIntervalError();
  TransactionAbortedError::default_instance_ = new TransactionAbortedError();
  TransactionPushError::default_instance_ = new TransactionPushError();
  TransactionRetryError::default_instance_ = new TransactionRetryError();
  TransactionStatusError::default_instance_ = new TransactionStatusError();
  WriteIntentError::default_instance_ = new WriteIntentError();
  WriteTooOldError::default_instance_ = new WriteTooOldError();
  OpRequiresTxnError::default_instance_ = new OpRequiresTxnError();
  ConditionFailedError::default_instance_ = new ConditionFailedError();
  Error::default_instance_ = new Error();
  GenericError::default_instance_->InitAsDefaultInstance();
  NotLeaderError::default_instance_->InitAsDefaultInstance();
  RangeNotFoundError::default_instance_->InitAsDefaultInstance();
  RangeKeyMismatchError::default_instance_->InitAsDefaultInstance();
  ReadWithinUncertaintyIntervalError::default_instance_->InitAsDefaultInstance();
  TransactionAbortedError::default_instance_->InitAsDefaultInstance();
  TransactionPushError::default_instance_->InitAsDefaultInstance();
  TransactionRetryError::default_instance_->InitAsDefaultInstance();
  TransactionStatusError::default_instance_->InitAsDefaultInstance();
  WriteIntentError::default_instance_->InitAsDefaultInstance();
  WriteTooOldError::default_instance_->InitAsDefaultInstance();
  OpRequiresTxnError::default_instance_->InitAsDefaultInstance();
  ConditionFailedError::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_errors_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_errors_2eproto {
  StaticDescriptorInitializer_errors_2eproto() {
    protobuf_AddDesc_errors_2eproto();
  }
} static_descriptor_initializer_errors_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GenericError::kMessageFieldNumber;
const int GenericError::kRetryableFieldNumber;
#endif  // !_MSC_VER

GenericError::GenericError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GenericError)
}

void GenericError::InitAsDefaultInstance() {
}

GenericError::GenericError(const GenericError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.GenericError)
}

void GenericError::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  retryable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenericError::~GenericError() {
  // @@protoc_insertion_point(destructor:proto.GenericError)
  SharedDtor();
}

void GenericError::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void GenericError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericError_descriptor_;
}

const GenericError& GenericError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errors_2eproto();
  return *default_instance_;
}

GenericError* GenericError::default_instance_ = NULL;

GenericError* GenericError::New() const {
  return new GenericError;
}

void GenericError::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    retryable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenericError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GenericError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_retryable;
        break;
      }

      // optional bool retryable = 2;
      case 2: {
        if (tag == 16) {
         parse_retryable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &retryable_)));
          set_has_retryable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GenericError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GenericError)
  return false;
#undef DO_
}

void GenericError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GenericError)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional bool retryable = 2;
  if (has_retryable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->retryable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GenericError)
}

::google::protobuf::uint8* GenericError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GenericError)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional bool retryable = 2;
  if (has_retryable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->retryable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GenericError)
  return target;
}

int GenericError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional bool retryable = 2;
    if (has_retryable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenericError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenericError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenericError::MergeFrom(const GenericError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_retryable()) {
      set_retryable(from.retryable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenericError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericError::CopyFrom(const GenericError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericError::IsInitialized() const {

  return true;
}

void GenericError::Swap(GenericError* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(retryable_, other->retryable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GenericError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericError_descriptor_;
  metadata.reflection = GenericError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotLeaderError::kLeaderFieldNumber;
#endif  // !_MSC_VER

NotLeaderError::NotLeaderError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.NotLeaderError)
}

void NotLeaderError::InitAsDefaultInstance() {
  leader_ = const_cast< ::proto::Replica*>(&::proto::Replica::default_instance());
}

NotLeaderError::NotLeaderError(const NotLeaderError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.NotLeaderError)
}

void NotLeaderError::SharedCtor() {
  _cached_size_ = 0;
  leader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotLeaderError::~NotLeaderError() {
  // @@protoc_insertion_point(destructor:proto.NotLeaderError)
  SharedDtor();
}

void NotLeaderError::SharedDtor() {
  if (this != default_instance_) {
    delete leader_;
  }
}

void NotLeaderError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotLeaderError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotLeaderError_descriptor_;
}

const NotLeaderError& NotLeaderError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errors_2eproto();
  return *default_instance_;
}

NotLeaderError* NotLeaderError::default_instance_ = NULL;

NotLeaderError* NotLeaderError::New() const {
  return new NotLeaderError;
}

void NotLeaderError::Clear() {
  if (has_leader()) {
    if (leader_ != NULL) leader_->::proto::Replica::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotLeaderError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.NotLeaderError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.Replica leader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.NotLeaderError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.NotLeaderError)
  return false;
#undef DO_
}

void NotLeaderError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.NotLeaderError)
  // optional .proto.Replica leader = 1;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->leader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.NotLeaderError)
}

::google::protobuf::uint8* NotLeaderError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.NotLeaderError)
  // optional .proto.Replica leader = 1;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->leader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.NotLeaderError)
  return target;
}

int NotLeaderError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.Replica leader = 1;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leader());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotLeaderError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotLeaderError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotLeaderError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotLeaderError::MergeFrom(const NotLeaderError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leader()) {
      mutable_leader()->::proto::Replica::MergeFrom(from.leader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotLeaderError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotLeaderError::CopyFrom(const NotLeaderError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotLeaderError::IsInitialized() const {

  return true;
}

void NotLeaderError::Swap(NotLeaderError* other) {
  if (other != this) {
    std::swap(leader_, other->leader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotLeaderError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotLeaderError_descriptor_;
  metadata.reflection = NotLeaderError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RangeNotFoundError::kRaftIdFieldNumber;
#endif  // !_MSC_VER

RangeNotFoundError::RangeNotFoundError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RangeNotFoundError)
}

void RangeNotFoundError::InitAsDefaultInstance() {
}

RangeNotFoundError::RangeNotFoundError(const RangeNotFoundError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.RangeNotFoundError)
}

void RangeNotFoundError::SharedCtor() {
  _cached_size_ = 0;
  raft_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeNotFoundError::~RangeNotFoundError() {
  // @@protoc_insertion_point(destructor:proto.RangeNotFoundError)
  SharedDtor();
}

void RangeNotFoundError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RangeNotFoundError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeNotFoundError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeNotFoundError_descriptor_;
}

const RangeNotFoundError& RangeNotFoundError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errors_2eproto();
  return *default_instance_;
}

RangeNotFoundError* RangeNotFoundError::default_instance_ = NULL;

RangeNotFoundError* RangeNotFoundError::New() const {
  return new RangeNotFoundError;
}

void RangeNotFoundError::Clear() {
  raft_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangeNotFoundError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.RangeNotFoundError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 raft_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &raft_id_)));
          set_has_raft_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.RangeNotFoundError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.RangeNotFoundError)
  return false;
#undef DO_
}

void RangeNotFoundError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.RangeNotFoundError)
  // optional int64 raft_id = 1;
  if (has_raft_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->raft_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.RangeNotFoundError)
}

::google::protobuf::uint8* RangeNotFoundError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RangeNotFoundError)
  // optional int64 raft_id = 1;
  if (has_raft_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->raft_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RangeNotFoundError)
  return target;
}

int RangeNotFoundError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 raft_id = 1;
    if (has_raft_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->raft_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeNotFoundError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangeNotFoundError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangeNotFoundError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeNotFoundError::MergeFrom(const RangeNotFoundError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raft_id()) {
      set_raft_id(from.raft_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangeNotFoundError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeNotFoundError::CopyFrom(const RangeNotFoundError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeNotFoundError::IsInitialized() const {

  return true;
}

void RangeNotFoundError::Swap(RangeNotFoundError* other) {
  if (other != this) {
    std::swap(raft_id_, other->raft_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangeNotFoundError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeNotFoundError_descriptor_;
  metadata.reflection = RangeNotFoundError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RangeKeyMismatchError::kRequestStartKeyFieldNumber;
const int RangeKeyMismatchError::kRequestEndKeyFieldNumber;
const int RangeKeyMismatchError::kRangeFieldNumber;
#endif  // !_MSC_VER

RangeKeyMismatchError::RangeKeyMismatchError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RangeKeyMismatchError)
}

void RangeKeyMismatchError::InitAsDefaultInstance() {
  range_ = const_cast< ::proto::RangeDescriptor*>(&::proto::RangeDescriptor::default_instance());
}

RangeKeyMismatchError::RangeKeyMismatchError(const RangeKeyMismatchError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.RangeKeyMismatchError)
}

void RangeKeyMismatchError::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_start_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_end_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeKeyMismatchError::~RangeKeyMismatchError() {
  // @@protoc_insertion_point(destructor:proto.RangeKeyMismatchError)
  SharedDtor();
}

void RangeKeyMismatchError::SharedDtor() {
  if (request_start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_start_key_;
  }
  if (request_end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_end_key_;
  }
  if (this != default_instance_) {
    delete range_;
  }
}

void RangeKeyMismatchError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeKeyMismatchError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeKeyMismatchError_descriptor_;
}

const RangeKeyMismatchError& RangeKeyMismatchError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errors_2eproto();
  return *default_instance_;
}

RangeKeyMismatchError* RangeKeyMismatchError::default_instance_ = NULL;

RangeKeyMismatchError* RangeKeyMismatchError::New() const {
  return new RangeKeyMismatchError;
}

void RangeKeyMismatchError::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_request_start_key()) {
      if (request_start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        request_start_key_->clear();
      }
    }
    if (has_request_end_key()) {
      if (request_end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        request_end_key_->clear();
      }
    }
    if (has_range()) {
      if (range_ != NULL) range_->::proto::RangeDescriptor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangeKeyMismatchError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.RangeKeyMismatchError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes request_start_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request_end_key;
        break;
      }

      // optional bytes request_end_key = 2;
      case 2: {
        if (tag == 18) {
         parse_request_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_range;
        break;
      }

      // optional .proto.RangeDescriptor range = 3;
      case 3: {
        if (tag == 26) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.RangeKeyMismatchError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.RangeKeyMismatchError)
  return false;
#undef DO_
}

void RangeKeyMismatchError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.RangeKeyMismatchError)
  // optional bytes request_start_key = 1;
  if (has_request_start_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->request_start_key(), output);
  }

  // optional bytes request_end_key = 2;
  if (has_request_end_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->request_end_key(), output);
  }

  // optional .proto.RangeDescriptor range = 3;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.RangeKeyMismatchError)
}

::google::protobuf::uint8* RangeKeyMismatchError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RangeKeyMismatchError)
  // optional bytes request_start_key = 1;
  if (has_request_start_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->request_start_key(), target);
  }

  // optional bytes request_end_key = 2;
  if (has_request_end_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->request_end_key(), target);
  }

  // optional .proto.RangeDescriptor range = 3;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RangeKeyMismatchError)
  return target;
}

int RangeKeyMismatchError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes request_start_key = 1;
    if (has_request_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_start_key());
    }

    // optional bytes request_end_key = 2;
    if (has_request_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_end_key());
    }

    // optional .proto.RangeDescriptor range = 3;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeKeyMismatchError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangeKeyMismatchError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangeKeyMismatchError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeKeyMismatchError::MergeFrom(const RangeKeyMismatchError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_start_key()) {
      set_request_start_key(from.request_start_key());
    }
    if (from.has_request_end_key()) {
      set_request_end_key(from.request_end_key());
    }
    if (from.has_range()) {
      mutable_range()->::proto::RangeDescriptor::MergeFrom(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangeKeyMismatchError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeKeyMismatchError::CopyFrom(const RangeKeyMismatchError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeKeyMismatchError::IsInitialized() const {

  return true;
}

void RangeKeyMismatchError::Swap(RangeKeyMismatchError* other) {
  if (other != this) {
    std::swap(request_start_key_, other->request_start_key_);
    std::swap(request_end_key_, other->request_end_key_);
    std::swap(range_, other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangeKeyMismatchError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeKeyMismatchError_descriptor_;
  metadata.reflection = RangeKeyMismatchError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadWithinUncertaintyIntervalError::kTimestampFieldNumber;
const int ReadWithinUncertaintyIntervalError::kExistingTimestampFieldNumber;
#endif  // !_MSC_VER

ReadWithinUncertaintyIntervalError::ReadWithinUncertaintyIntervalError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ReadWithinUncertaintyIntervalError)
}

void ReadWithinUncertaintyIntervalError::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::proto::Timestamp*>(&::proto::Timestamp::default_instance());
  existing_timestamp_ = const_cast< ::proto::Timestamp*>(&::proto::Timestamp::default_instance());
}

ReadWithinUncertaintyIntervalError::ReadWithinUncertaintyIntervalError(const ReadWithinUncertaintyIntervalError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ReadWithinUncertaintyIntervalError)
}

void ReadWithinUncertaintyIntervalError::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = NULL;
  existing_timestamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadWithinUncertaintyIntervalError::~ReadWithinUncertaintyIntervalError() {
  // @@protoc_insertion_point(destructor:proto.ReadWithinUncertaintyIntervalError)
  SharedDtor();
}

void ReadWithinUncertaintyIntervalError::SharedDtor() {
  if (this != default_instance_) {
    delete timestamp_;
    delete existing_timestamp_;
  }
}

void ReadWithinUncertaintyIntervalError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadWithinUncertaintyIntervalError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadWithinUncertaintyIntervalError_descriptor_;
}

const ReadWithinUncertaintyIntervalError& ReadWithinUncertaintyIntervalError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errors_2eproto();
  return *default_instance_;
}

ReadWithinUncertaintyIntervalError* ReadWithinUncertaintyIntervalError::default_instance_ = NULL;

ReadWithinUncertaintyIntervalError* ReadWithinUncertaintyIntervalError::New() const {
  return new ReadWithinUncertaintyIntervalError;
}

void ReadWithinUncertaintyIntervalError::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::proto::Timestamp::Clear();
    }
    if (has_existing_timestamp()) {
      if (existing_timestamp_ != NULL) existing_timestamp_->::proto::Timestamp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadWithinUncertaintyIntervalError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ReadWithinUncertaintyIntervalError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.Timestamp timestamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_existing_timestamp;
        break;
      }

      // optional .proto.Timestamp existing_timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_existing_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_existing_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ReadWithinUncertaintyIntervalError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ReadWithinUncertaintyIntervalError)
  return false;
#undef DO_
}

void ReadWithinUncertaintyIntervalError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ReadWithinUncertaintyIntervalError)
  // optional .proto.Timestamp timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->timestamp(), output);
  }

  // optional .proto.Timestamp existing_timestamp = 2;
  if (has_existing_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->existing_timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ReadWithinUncertaintyIntervalError)
}

::google::protobuf::uint8* ReadWithinUncertaintyIntervalError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ReadWithinUncertaintyIntervalError)
  // optional .proto.Timestamp timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->timestamp(), target);
  }

  // optional .proto.Timestamp existing_timestamp = 2;
  if (has_existing_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->existing_timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ReadWithinUncertaintyIntervalError)
  return target;
}

int ReadWithinUncertaintyIntervalError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.Timestamp timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

    // optional .proto.Timestamp existing_timestamp = 2;
    if (has_existing_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->existing_timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadWithinUncertaintyIntervalError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadWithinUncertaintyIntervalError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadWithinUncertaintyIntervalError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadWithinUncertaintyIntervalError::MergeFrom(const ReadWithinUncertaintyIntervalError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      mutable_timestamp()->::proto::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_existing_timestamp()) {
      mutable_existing_timestamp()->::proto::Timestamp::MergeFrom(from.existing_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadWithinUncertaintyIntervalError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadWithinUncertaintyIntervalError::CopyFrom(const ReadWithinUncertaintyIntervalError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadWithinUncertaintyIntervalError::IsInitialized() const {

  return true;
}

void ReadWithinUncertaintyIntervalError::Swap(ReadWithinUncertaintyIntervalError* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(existing_timestamp_, other->existing_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadWithinUncertaintyIntervalError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadWithinUncertaintyIntervalError_descriptor_;
  metadata.reflection = ReadWithinUncertaintyIntervalError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionAbortedError::kTxnFieldNumber;
#endif  // !_MSC_VER

TransactionAbortedError::TransactionAbortedError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TransactionAbortedError)
}

void TransactionAbortedError::InitAsDefaultInstance() {
  txn_ = const_cast< ::proto::Transaction*>(&::proto::Transaction::default_instance());
}

TransactionAbortedError::TransactionAbortedError(const TransactionAbortedError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.TransactionAbortedError)
}

void TransactionAbortedError::SharedCtor() {
  _cached_size_ = 0;
  txn_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionAbortedError::~TransactionAbortedError() {
  // @@protoc_insertion_point(destructor:proto.TransactionAbortedError)
  SharedDtor();
}

void TransactionAbortedError::SharedDtor() {
  if (this != default_instance_) {
    delete txn_;
  }
}

void TransactionAbortedError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionAbortedError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionAbortedError_descriptor_;
}

const TransactionAbortedError& TransactionAbortedError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errors_2eproto();
  return *default_instance_;
}

TransactionAbortedError* TransactionAbortedError::default_instance_ = NULL;

TransactionAbortedError* TransactionAbortedError::New() const {
  return new TransactionAbortedError;
}

void TransactionAbortedError::Clear() {
  if (has_txn()) {
    if (txn_ != NULL) txn_->::proto::Transaction::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionAbortedError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.TransactionAbortedError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.Transaction txn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.TransactionAbortedError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.TransactionAbortedError)
  return false;
#undef DO_
}

void TransactionAbortedError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.TransactionAbortedError)
  // optional .proto.Transaction txn = 1;
  if (has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->txn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.TransactionAbortedError)
}

::google::protobuf::uint8* TransactionAbortedError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TransactionAbortedError)
  // optional .proto.Transaction txn = 1;
  if (has_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->txn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TransactionAbortedError)
  return target;
}

int TransactionAbortedError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.Transaction txn = 1;
    if (has_txn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->txn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionAbortedError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionAbortedError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionAbortedError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionAbortedError::MergeFrom(const TransactionAbortedError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txn()) {
      mutable_txn()->::proto::Transaction::MergeFrom(from.txn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionAbortedError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionAbortedError::CopyFrom(const TransactionAbortedError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionAbortedError::IsInitialized() const {

  return true;
}

void TransactionAbortedError::Swap(TransactionAbortedError* other) {
  if (other != this) {
    std::swap(txn_, other->txn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionAbortedError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionAbortedError_descriptor_;
  metadata.reflection = TransactionAbortedError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionPushError::kTxnFieldNumber;
const int TransactionPushError::kPusheeTxnFieldNumber;
#endif  // !_MSC_VER

TransactionPushError::TransactionPushError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TransactionPushError)
}

void TransactionPushError::InitAsDefaultInstance() {
  txn_ = const_cast< ::proto::Transaction*>(&::proto::Transaction::default_instance());
  pushee_txn_ = const_cast< ::proto::Transaction*>(&::proto::Transaction::default_instance());
}

TransactionPushError::TransactionPushError(const TransactionPushError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.TransactionPushError)
}

void TransactionPushError::SharedCtor() {
  _cached_size_ = 0;
  txn_ = NULL;
  pushee_txn_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionPushError::~TransactionPushError() {
  // @@protoc_insertion_point(destructor:proto.TransactionPushError)
  SharedDtor();
}

void TransactionPushError::SharedDtor() {
  if (this != default_instance_) {
    delete txn_;
    delete pushee_txn_;
  }
}

void TransactionPushError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionPushError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionPushError_descriptor_;
}

const TransactionPushError& TransactionPushError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errors_2eproto();
  return *default_instance_;
}

TransactionPushError* TransactionPushError::default_instance_ = NULL;

TransactionPushError* TransactionPushError::New() const {
  return new TransactionPushError;
}

void TransactionPushError::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_txn()) {
      if (txn_ != NULL) txn_->::proto::Transaction::Clear();
    }
    if (has_pushee_txn()) {
      if (pushee_txn_ != NULL) pushee_txn_->::proto::Transaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionPushError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.TransactionPushError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.Transaction txn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pushee_txn;
        break;
      }

      // optional .proto.Transaction pushee_txn = 2;
      case 2: {
        if (tag == 18) {
         parse_pushee_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pushee_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.TransactionPushError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.TransactionPushError)
  return false;
#undef DO_
}

void TransactionPushError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.TransactionPushError)
  // optional .proto.Transaction txn = 1;
  if (has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->txn(), output);
  }

  // optional .proto.Transaction pushee_txn = 2;
  if (has_pushee_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pushee_txn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.TransactionPushError)
}

::google::protobuf::uint8* TransactionPushError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TransactionPushError)
  // optional .proto.Transaction txn = 1;
  if (has_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->txn(), target);
  }

  // optional .proto.Transaction pushee_txn = 2;
  if (has_pushee_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pushee_txn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TransactionPushError)
  return target;
}

int TransactionPushError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.Transaction txn = 1;
    if (has_txn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->txn());
    }

    // optional .proto.Transaction pushee_txn = 2;
    if (has_pushee_txn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pushee_txn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionPushError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionPushError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionPushError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionPushError::MergeFrom(const TransactionPushError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txn()) {
      mutable_txn()->::proto::Transaction::MergeFrom(from.txn());
    }
    if (from.has_pushee_txn()) {
      mutable_pushee_txn()->::proto::Transaction::MergeFrom(from.pushee_txn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionPushError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionPushError::CopyFrom(const TransactionPushError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPushError::IsInitialized() const {

  return true;
}

void TransactionPushError::Swap(TransactionPushError* other) {
  if (other != this) {
    std::swap(txn_, other->txn_);
    std::swap(pushee_txn_, other->pushee_txn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionPushError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionPushError_descriptor_;
  metadata.reflection = TransactionPushError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionRetryError::kTxnFieldNumber;
#endif  // !_MSC_VER

TransactionRetryError::TransactionRetryError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TransactionRetryError)
}

void TransactionRetryError::InitAsDefaultInstance() {
  txn_ = const_cast< ::proto::Transaction*>(&::proto::Transaction::default_instance());
}

TransactionRetryError::TransactionRetryError(const TransactionRetryError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.TransactionRetryError)
}

void TransactionRetryError::SharedCtor() {
  _cached_size_ = 0;
  txn_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionRetryError::~TransactionRetryError() {
  // @@protoc_insertion_point(destructor:proto.TransactionRetryError)
  SharedDtor();
}

void TransactionRetryError::SharedDtor() {
  if (this != default_instance_) {
    delete txn_;
  }
}

void TransactionRetryError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionRetryError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionRetryError_descriptor_;
}

const TransactionRetryError& TransactionRetryError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errors_2eproto();
  return *default_instance_;
}

TransactionRetryError* TransactionRetryError::default_instance_ = NULL;

TransactionRetryError* TransactionRetryError::New() const {
  return new TransactionRetryError;
}

void TransactionRetryError::Clear() {
  if (has_txn()) {
    if (txn_ != NULL) txn_->::proto::Transaction::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionRetryError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.TransactionRetryError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.Transaction txn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.TransactionRetryError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.TransactionRetryError)
  return false;
#undef DO_
}

void TransactionRetryError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.TransactionRetryError)
  // optional .proto.Transaction txn = 1;
  if (has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->txn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.TransactionRetryError)
}

::google::protobuf::uint8* TransactionRetryError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TransactionRetryError)
  // optional .proto.Transaction txn = 1;
  if (has_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->txn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TransactionRetryError)
  return target;
}

int TransactionRetryError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.Transaction txn = 1;
    if (has_txn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->txn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionRetryError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionRetryError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionRetryError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionRetryError::MergeFrom(const TransactionRetryError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txn()) {
      mutable_txn()->::proto::Transaction::MergeFrom(from.txn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionRetryError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionRetryError::CopyFrom(const TransactionRetryError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRetryError::IsInitialized() const {

  return true;
}

void TransactionRetryError::Swap(TransactionRetryError* other) {
  if (other != this) {
    std::swap(txn_, other->txn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionRetryError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionRetryError_descriptor_;
  metadata.reflection = TransactionRetryError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionStatusError::kTxnFieldNumber;
const int TransactionStatusError::kMsgFieldNumber;
#endif  // !_MSC_VER

TransactionStatusError::TransactionStatusError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TransactionStatusError)
}

void TransactionStatusError::InitAsDefaultInstance() {
  txn_ = const_cast< ::proto::Transaction*>(&::proto::Transaction::default_instance());
}

TransactionStatusError::TransactionStatusError(const TransactionStatusError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.TransactionStatusError)
}

void TransactionStatusError::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  txn_ = NULL;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionStatusError::~TransactionStatusError() {
  // @@protoc_insertion_point(destructor:proto.TransactionStatusError)
  SharedDtor();
}

void TransactionStatusError::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
    delete txn_;
  }
}

void TransactionStatusError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionStatusError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionStatusError_descriptor_;
}

const TransactionStatusError& TransactionStatusError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errors_2eproto();
  return *default_instance_;
}

TransactionStatusError* TransactionStatusError::default_instance_ = NULL;

TransactionStatusError* TransactionStatusError::New() const {
  return new TransactionStatusError;
}

void TransactionStatusError::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_txn()) {
      if (txn_ != NULL) txn_->::proto::Transaction::Clear();
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionStatusError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.TransactionStatusError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.Transaction txn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.TransactionStatusError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.TransactionStatusError)
  return false;
#undef DO_
}

void TransactionStatusError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.TransactionStatusError)
  // optional .proto.Transaction txn = 1;
  if (has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->txn(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.TransactionStatusError)
}

::google::protobuf::uint8* TransactionStatusError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TransactionStatusError)
  // optional .proto.Transaction txn = 1;
  if (has_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->txn(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TransactionStatusError)
  return target;
}

int TransactionStatusError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.Transaction txn = 1;
    if (has_txn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->txn());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionStatusError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionStatusError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionStatusError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionStatusError::MergeFrom(const TransactionStatusError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txn()) {
      mutable_txn()->::proto::Transaction::MergeFrom(from.txn());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionStatusError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionStatusError::CopyFrom(const TransactionStatusError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionStatusError::IsInitialized() const {

  return true;
}

void TransactionStatusError::Swap(TransactionStatusError* other) {
  if (other != this) {
    std::swap(txn_, other->txn_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionStatusError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionStatusError_descriptor_;
  metadata.reflection = TransactionStatusError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteIntentError::kKeyFieldNumber;
const int WriteIntentError::kTxnFieldNumber;
const int WriteIntentError::kResolvedFieldNumber;
#endif  // !_MSC_VER

WriteIntentError::WriteIntentError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.WriteIntentError)
}

void WriteIntentError::InitAsDefaultInstance() {
  txn_ = const_cast< ::proto::Transaction*>(&::proto::Transaction::default_instance());
}

WriteIntentError::WriteIntentError(const WriteIntentError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.WriteIntentError)
}

void WriteIntentError::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_ = NULL;
  resolved_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteIntentError::~WriteIntentError() {
  // @@protoc_insertion_point(destructor:proto.WriteIntentError)
  SharedDtor();
}

void WriteIntentError::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
    delete txn_;
  }
}

void WriteIntentError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteIntentError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteIntentError_descriptor_;
}

const WriteIntentError& WriteIntentError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errors_2eproto();
  return *default_instance_;
}

WriteIntentError* WriteIntentError::default_instance_ = NULL;

WriteIntentError* WriteIntentError::New() const {
  return new WriteIntentError;
}

void WriteIntentError::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_txn()) {
      if (txn_ != NULL) txn_->::proto::Transaction::Clear();
    }
    resolved_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteIntentError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.WriteIntentError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_txn;
        break;
      }

      // optional .proto.Transaction txn = 2;
      case 2: {
        if (tag == 18) {
         parse_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_resolved;
        break;
      }

      // optional bool resolved = 3;
      case 3: {
        if (tag == 24) {
         parse_resolved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resolved_)));
          set_has_resolved();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.WriteIntentError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.WriteIntentError)
  return false;
#undef DO_
}

void WriteIntentError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.WriteIntentError)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional .proto.Transaction txn = 2;
  if (has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->txn(), output);
  }

  // optional bool resolved = 3;
  if (has_resolved()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->resolved(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.WriteIntentError)
}

::google::protobuf::uint8* WriteIntentError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.WriteIntentError)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional .proto.Transaction txn = 2;
  if (has_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->txn(), target);
  }

  // optional bool resolved = 3;
  if (has_resolved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->resolved(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.WriteIntentError)
  return target;
}

int WriteIntentError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional .proto.Transaction txn = 2;
    if (has_txn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->txn());
    }

    // optional bool resolved = 3;
    if (has_resolved()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteIntentError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteIntentError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteIntentError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteIntentError::MergeFrom(const WriteIntentError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_txn()) {
      mutable_txn()->::proto::Transaction::MergeFrom(from.txn());
    }
    if (from.has_resolved()) {
      set_resolved(from.resolved());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteIntentError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteIntentError::CopyFrom(const WriteIntentError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteIntentError::IsInitialized() const {

  return true;
}

void WriteIntentError::Swap(WriteIntentError* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(txn_, other->txn_);
    std::swap(resolved_, other->resolved_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteIntentError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteIntentError_descriptor_;
  metadata.reflection = WriteIntentError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteTooOldError::kTimestampFieldNumber;
const int WriteTooOldError::kExistingTimestampFieldNumber;
#endif  // !_MSC_VER

WriteTooOldError::WriteTooOldError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.WriteTooOldError)
}

void WriteTooOldError::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::proto::Timestamp*>(&::proto::Timestamp::default_instance());
  existing_timestamp_ = const_cast< ::proto::Timestamp*>(&::proto::Timestamp::default_instance());
}

WriteTooOldError::WriteTooOldError(const WriteTooOldError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.WriteTooOldError)
}

void WriteTooOldError::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = NULL;
  existing_timestamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteTooOldError::~WriteTooOldError() {
  // @@protoc_insertion_point(destructor:proto.WriteTooOldError)
  SharedDtor();
}

void WriteTooOldError::SharedDtor() {
  if (this != default_instance_) {
    delete timestamp_;
    delete existing_timestamp_;
  }
}

void WriteTooOldError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteTooOldError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteTooOldError_descriptor_;
}

const WriteTooOldError& WriteTooOldError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errors_2eproto();
  return *default_instance_;
}

WriteTooOldError* WriteTooOldError::default_instance_ = NULL;

WriteTooOldError* WriteTooOldError::New() const {
  return new WriteTooOldError;
}

void WriteTooOldError::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::proto::Timestamp::Clear();
    }
    if (has_existing_timestamp()) {
      if (existing_timestamp_ != NULL) existing_timestamp_->::proto::Timestamp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteTooOldError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.WriteTooOldError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.Timestamp timestamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_existing_timestamp;
        break;
      }

      // optional .proto.Timestamp existing_timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_existing_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_existing_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.WriteTooOldError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.WriteTooOldError)
  return false;
#undef DO_
}

void WriteTooOldError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.WriteTooOldError)
  // optional .proto.Timestamp timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->timestamp(), output);
  }

  // optional .proto.Timestamp existing_timestamp = 2;
  if (has_existing_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->existing_timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.WriteTooOldError)
}

::google::protobuf::uint8* WriteTooOldError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.WriteTooOldError)
  // optional .proto.Timestamp timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->timestamp(), target);
  }

  // optional .proto.Timestamp existing_timestamp = 2;
  if (has_existing_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->existing_timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.WriteTooOldError)
  return target;
}

int WriteTooOldError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.Timestamp timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

    // optional .proto.Timestamp existing_timestamp = 2;
    if (has_existing_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->existing_timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteTooOldError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteTooOldError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteTooOldError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteTooOldError::MergeFrom(const WriteTooOldError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      mutable_timestamp()->::proto::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_existing_timestamp()) {
      mutable_existing_timestamp()->::proto::Timestamp::MergeFrom(from.existing_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteTooOldError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteTooOldError::CopyFrom(const WriteTooOldError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteTooOldError::IsInitialized() const {

  return true;
}

void WriteTooOldError::Swap(WriteTooOldError* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(existing_timestamp_, other->existing_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteTooOldError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteTooOldError_descriptor_;
  metadata.reflection = WriteTooOldError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpRequiresTxnError::OpRequiresTxnError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.OpRequiresTxnError)
}

void OpRequiresTxnError::InitAsDefaultInstance() {
}

OpRequiresTxnError::OpRequiresTxnError(const OpRequiresTxnError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.OpRequiresTxnError)
}

void OpRequiresTxnError::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpRequiresTxnError::~OpRequiresTxnError() {
  // @@protoc_insertion_point(destructor:proto.OpRequiresTxnError)
  SharedDtor();
}

void OpRequiresTxnError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpRequiresTxnError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpRequiresTxnError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpRequiresTxnError_descriptor_;
}

const OpRequiresTxnError& OpRequiresTxnError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errors_2eproto();
  return *default_instance_;
}

OpRequiresTxnError* OpRequiresTxnError::default_instance_ = NULL;

OpRequiresTxnError* OpRequiresTxnError::New() const {
  return new OpRequiresTxnError;
}

void OpRequiresTxnError::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpRequiresTxnError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.OpRequiresTxnError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.OpRequiresTxnError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.OpRequiresTxnError)
  return false;
#undef DO_
}

void OpRequiresTxnError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.OpRequiresTxnError)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.OpRequiresTxnError)
}

::google::protobuf::uint8* OpRequiresTxnError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.OpRequiresTxnError)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.OpRequiresTxnError)
  return target;
}

int OpRequiresTxnError::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpRequiresTxnError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpRequiresTxnError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpRequiresTxnError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpRequiresTxnError::MergeFrom(const OpRequiresTxnError& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpRequiresTxnError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpRequiresTxnError::CopyFrom(const OpRequiresTxnError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpRequiresTxnError::IsInitialized() const {

  return true;
}

void OpRequiresTxnError::Swap(OpRequiresTxnError* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpRequiresTxnError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpRequiresTxnError_descriptor_;
  metadata.reflection = OpRequiresTxnError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConditionFailedError::kActualValueFieldNumber;
#endif  // !_MSC_VER

ConditionFailedError::ConditionFailedError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ConditionFailedError)
}

void ConditionFailedError::InitAsDefaultInstance() {
  actual_value_ = const_cast< ::proto::Value*>(&::proto::Value::default_instance());
}

ConditionFailedError::ConditionFailedError(const ConditionFailedError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ConditionFailedError)
}

void ConditionFailedError::SharedCtor() {
  _cached_size_ = 0;
  actual_value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConditionFailedError::~ConditionFailedError() {
  // @@protoc_insertion_point(destructor:proto.ConditionFailedError)
  SharedDtor();
}

void ConditionFailedError::SharedDtor() {
  if (this != default_instance_) {
    delete actual_value_;
  }
}

void ConditionFailedError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConditionFailedError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConditionFailedError_descriptor_;
}

const ConditionFailedError& ConditionFailedError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errors_2eproto();
  return *default_instance_;
}

ConditionFailedError* ConditionFailedError::default_instance_ = NULL;

ConditionFailedError* ConditionFailedError::New() const {
  return new ConditionFailedError;
}

void ConditionFailedError::Clear() {
  if (has_actual_value()) {
    if (actual_value_ != NULL) actual_value_->::proto::Value::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConditionFailedError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ConditionFailedError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.Value actual_value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actual_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ConditionFailedError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ConditionFailedError)
  return false;
#undef DO_
}

void ConditionFailedError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ConditionFailedError)
  // optional .proto.Value actual_value = 1;
  if (has_actual_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actual_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ConditionFailedError)
}

::google::protobuf::uint8* ConditionFailedError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ConditionFailedError)
  // optional .proto.Value actual_value = 1;
  if (has_actual_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->actual_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ConditionFailedError)
  return target;
}

int ConditionFailedError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.Value actual_value = 1;
    if (has_actual_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actual_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConditionFailedError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConditionFailedError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConditionFailedError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConditionFailedError::MergeFrom(const ConditionFailedError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actual_value()) {
      mutable_actual_value()->::proto::Value::MergeFrom(from.actual_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConditionFailedError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionFailedError::CopyFrom(const ConditionFailedError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionFailedError::IsInitialized() const {

  return true;
}

void ConditionFailedError::Swap(ConditionFailedError* other) {
  if (other != this) {
    std::swap(actual_value_, other->actual_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConditionFailedError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConditionFailedError_descriptor_;
  metadata.reflection = ConditionFailedError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Error::kGenericFieldNumber;
const int Error::kNotLeaderFieldNumber;
const int Error::kRangeNotFoundFieldNumber;
const int Error::kRangeKeyMismatchFieldNumber;
const int Error::kReadWithinUncertaintyIntervalFieldNumber;
const int Error::kTransactionAbortedFieldNumber;
const int Error::kTransactionPushFieldNumber;
const int Error::kTransactionRetryFieldNumber;
const int Error::kTransactionStatusFieldNumber;
const int Error::kWriteIntentFieldNumber;
const int Error::kWriteTooOldFieldNumber;
const int Error::kOpRequiresTxnFieldNumber;
const int Error::kConditionFailedFieldNumber;
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Error)
}

void Error::InitAsDefaultInstance() {
  generic_ = const_cast< ::proto::GenericError*>(&::proto::GenericError::default_instance());
  not_leader_ = const_cast< ::proto::NotLeaderError*>(&::proto::NotLeaderError::default_instance());
  range_not_found_ = const_cast< ::proto::RangeNotFoundError*>(&::proto::RangeNotFoundError::default_instance());
  range_key_mismatch_ = const_cast< ::proto::RangeKeyMismatchError*>(&::proto::RangeKeyMismatchError::default_instance());
  read_within_uncertainty_interval_ = const_cast< ::proto::ReadWithinUncertaintyIntervalError*>(&::proto::ReadWithinUncertaintyIntervalError::default_instance());
  transaction_aborted_ = const_cast< ::proto::TransactionAbortedError*>(&::proto::TransactionAbortedError::default_instance());
  transaction_push_ = const_cast< ::proto::TransactionPushError*>(&::proto::TransactionPushError::default_instance());
  transaction_retry_ = const_cast< ::proto::TransactionRetryError*>(&::proto::TransactionRetryError::default_instance());
  transaction_status_ = const_cast< ::proto::TransactionStatusError*>(&::proto::TransactionStatusError::default_instance());
  write_intent_ = const_cast< ::proto::WriteIntentError*>(&::proto::WriteIntentError::default_instance());
  write_too_old_ = const_cast< ::proto::WriteTooOldError*>(&::proto::WriteTooOldError::default_instance());
  op_requires_txn_ = const_cast< ::proto::OpRequiresTxnError*>(&::proto::OpRequiresTxnError::default_instance());
  condition_failed_ = const_cast< ::proto::ConditionFailedError*>(&::proto::ConditionFailedError::default_instance());
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.Error)
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  generic_ = NULL;
  not_leader_ = NULL;
  range_not_found_ = NULL;
  range_key_mismatch_ = NULL;
  read_within_uncertainty_interval_ = NULL;
  transaction_aborted_ = NULL;
  transaction_push_ = NULL;
  transaction_retry_ = NULL;
  transaction_status_ = NULL;
  write_intent_ = NULL;
  write_too_old_ = NULL;
  op_requires_txn_ = NULL;
  condition_failed_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:proto.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  if (this != default_instance_) {
    delete generic_;
    delete not_leader_;
    delete range_not_found_;
    delete range_key_mismatch_;
    delete read_within_uncertainty_interval_;
    delete transaction_aborted_;
    delete transaction_push_;
    delete transaction_retry_;
    delete transaction_status_;
    delete write_intent_;
    delete write_too_old_;
    delete op_requires_txn_;
    delete condition_failed_;
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errors_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_generic()) {
      if (generic_ != NULL) generic_->::proto::GenericError::Clear();
    }
    if (has_not_leader()) {
      if (not_leader_ != NULL) not_leader_->::proto::NotLeaderError::Clear();
    }
    if (has_range_not_found()) {
      if (range_not_found_ != NULL) range_not_found_->::proto::RangeNotFoundError::Clear();
    }
    if (has_range_key_mismatch()) {
      if (range_key_mismatch_ != NULL) range_key_mismatch_->::proto::RangeKeyMismatchError::Clear();
    }
    if (has_read_within_uncertainty_interval()) {
      if (read_within_uncertainty_interval_ != NULL) read_within_uncertainty_interval_->::proto::ReadWithinUncertaintyIntervalError::Clear();
    }
    if (has_transaction_aborted()) {
      if (transaction_aborted_ != NULL) transaction_aborted_->::proto::TransactionAbortedError::Clear();
    }
    if (has_transaction_push()) {
      if (transaction_push_ != NULL) transaction_push_->::proto::TransactionPushError::Clear();
    }
    if (has_transaction_retry()) {
      if (transaction_retry_ != NULL) transaction_retry_->::proto::TransactionRetryError::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_transaction_status()) {
      if (transaction_status_ != NULL) transaction_status_->::proto::TransactionStatusError::Clear();
    }
    if (has_write_intent()) {
      if (write_intent_ != NULL) write_intent_->::proto::WriteIntentError::Clear();
    }
    if (has_write_too_old()) {
      if (write_too_old_ != NULL) write_too_old_->::proto::WriteTooOldError::Clear();
    }
    if (has_op_requires_txn()) {
      if (op_requires_txn_ != NULL) op_requires_txn_->::proto::OpRequiresTxnError::Clear();
    }
    if (has_condition_failed()) {
      if (condition_failed_ != NULL) condition_failed_->::proto::ConditionFailedError::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.GenericError generic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_not_leader;
        break;
      }

      // optional .proto.NotLeaderError not_leader = 2;
      case 2: {
        if (tag == 18) {
         parse_not_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_not_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_range_not_found;
        break;
      }

      // optional .proto.RangeNotFoundError range_not_found = 3;
      case 3: {
        if (tag == 26) {
         parse_range_not_found:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_not_found()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_range_key_mismatch;
        break;
      }

      // optional .proto.RangeKeyMismatchError range_key_mismatch = 4;
      case 4: {
        if (tag == 34) {
         parse_range_key_mismatch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_key_mismatch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_read_within_uncertainty_interval;
        break;
      }

      // optional .proto.ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 5;
      case 5: {
        if (tag == 42) {
         parse_read_within_uncertainty_interval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_within_uncertainty_interval()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_transaction_aborted;
        break;
      }

      // optional .proto.TransactionAbortedError transaction_aborted = 6;
      case 6: {
        if (tag == 50) {
         parse_transaction_aborted:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_aborted()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_transaction_push;
        break;
      }

      // optional .proto.TransactionPushError transaction_push = 7;
      case 7: {
        if (tag == 58) {
         parse_transaction_push:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_push()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_transaction_retry;
        break;
      }

      // optional .proto.TransactionRetryError transaction_retry = 8;
      case 8: {
        if (tag == 66) {
         parse_transaction_retry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_retry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_transaction_status;
        break;
      }

      // optional .proto.TransactionStatusError transaction_status = 9;
      case 9: {
        if (tag == 74) {
         parse_transaction_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_write_intent;
        break;
      }

      // optional .proto.WriteIntentError write_intent = 10;
      case 10: {
        if (tag == 82) {
         parse_write_intent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_write_intent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_write_too_old;
        break;
      }

      // optional .proto.WriteTooOldError write_too_old = 11;
      case 11: {
        if (tag == 90) {
         parse_write_too_old:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_write_too_old()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_op_requires_txn;
        break;
      }

      // optional .proto.OpRequiresTxnError op_requires_txn = 12;
      case 12: {
        if (tag == 98) {
         parse_op_requires_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_requires_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_condition_failed;
        break;
      }

      // optional .proto.ConditionFailedError condition_failed = 13;
      case 13: {
        if (tag == 106) {
         parse_condition_failed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition_failed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Error)
  // optional .proto.GenericError generic = 1;
  if (has_generic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->generic(), output);
  }

  // optional .proto.NotLeaderError not_leader = 2;
  if (has_not_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->not_leader(), output);
  }

  // optional .proto.RangeNotFoundError range_not_found = 3;
  if (has_range_not_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->range_not_found(), output);
  }

  // optional .proto.RangeKeyMismatchError range_key_mismatch = 4;
  if (has_range_key_mismatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->range_key_mismatch(), output);
  }

  // optional .proto.ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 5;
  if (has_read_within_uncertainty_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->read_within_uncertainty_interval(), output);
  }

  // optional .proto.TransactionAbortedError transaction_aborted = 6;
  if (has_transaction_aborted()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->transaction_aborted(), output);
  }

  // optional .proto.TransactionPushError transaction_push = 7;
  if (has_transaction_push()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->transaction_push(), output);
  }

  // optional .proto.TransactionRetryError transaction_retry = 8;
  if (has_transaction_retry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->transaction_retry(), output);
  }

  // optional .proto.TransactionStatusError transaction_status = 9;
  if (has_transaction_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->transaction_status(), output);
  }

  // optional .proto.WriteIntentError write_intent = 10;
  if (has_write_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->write_intent(), output);
  }

  // optional .proto.WriteTooOldError write_too_old = 11;
  if (has_write_too_old()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->write_too_old(), output);
  }

  // optional .proto.OpRequiresTxnError op_requires_txn = 12;
  if (has_op_requires_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->op_requires_txn(), output);
  }

  // optional .proto.ConditionFailedError condition_failed = 13;
  if (has_condition_failed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->condition_failed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Error)
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Error)
  // optional .proto.GenericError generic = 1;
  if (has_generic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->generic(), target);
  }

  // optional .proto.NotLeaderError not_leader = 2;
  if (has_not_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->not_leader(), target);
  }

  // optional .proto.RangeNotFoundError range_not_found = 3;
  if (has_range_not_found()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->range_not_found(), target);
  }

  // optional .proto.RangeKeyMismatchError range_key_mismatch = 4;
  if (has_range_key_mismatch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->range_key_mismatch(), target);
  }

  // optional .proto.ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 5;
  if (has_read_within_uncertainty_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->read_within_uncertainty_interval(), target);
  }

  // optional .proto.TransactionAbortedError transaction_aborted = 6;
  if (has_transaction_aborted()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->transaction_aborted(), target);
  }

  // optional .proto.TransactionPushError transaction_push = 7;
  if (has_transaction_push()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->transaction_push(), target);
  }

  // optional .proto.TransactionRetryError transaction_retry = 8;
  if (has_transaction_retry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->transaction_retry(), target);
  }

  // optional .proto.TransactionStatusError transaction_status = 9;
  if (has_transaction_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->transaction_status(), target);
  }

  // optional .proto.WriteIntentError write_intent = 10;
  if (has_write_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->write_intent(), target);
  }

  // optional .proto.WriteTooOldError write_too_old = 11;
  if (has_write_too_old()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->write_too_old(), target);
  }

  // optional .proto.OpRequiresTxnError op_requires_txn = 12;
  if (has_op_requires_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->op_requires_txn(), target);
  }

  // optional .proto.ConditionFailedError condition_failed = 13;
  if (has_condition_failed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->condition_failed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Error)
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.GenericError generic = 1;
    if (has_generic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->generic());
    }

    // optional .proto.NotLeaderError not_leader = 2;
    if (has_not_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->not_leader());
    }

    // optional .proto.RangeNotFoundError range_not_found = 3;
    if (has_range_not_found()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range_not_found());
    }

    // optional .proto.RangeKeyMismatchError range_key_mismatch = 4;
    if (has_range_key_mismatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range_key_mismatch());
    }

    // optional .proto.ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 5;
    if (has_read_within_uncertainty_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read_within_uncertainty_interval());
    }

    // optional .proto.TransactionAbortedError transaction_aborted = 6;
    if (has_transaction_aborted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transaction_aborted());
    }

    // optional .proto.TransactionPushError transaction_push = 7;
    if (has_transaction_push()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transaction_push());
    }

    // optional .proto.TransactionRetryError transaction_retry = 8;
    if (has_transaction_retry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transaction_retry());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto.TransactionStatusError transaction_status = 9;
    if (has_transaction_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transaction_status());
    }

    // optional .proto.WriteIntentError write_intent = 10;
    if (has_write_intent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->write_intent());
    }

    // optional .proto.WriteTooOldError write_too_old = 11;
    if (has_write_too_old()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->write_too_old());
    }

    // optional .proto.OpRequiresTxnError op_requires_txn = 12;
    if (has_op_requires_txn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->op_requires_txn());
    }

    // optional .proto.ConditionFailedError condition_failed = 13;
    if (has_condition_failed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->condition_failed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_generic()) {
      mutable_generic()->::proto::GenericError::MergeFrom(from.generic());
    }
    if (from.has_not_leader()) {
      mutable_not_leader()->::proto::NotLeaderError::MergeFrom(from.not_leader());
    }
    if (from.has_range_not_found()) {
      mutable_range_not_found()->::proto::RangeNotFoundError::MergeFrom(from.range_not_found());
    }
    if (from.has_range_key_mismatch()) {
      mutable_range_key_mismatch()->::proto::RangeKeyMismatchError::MergeFrom(from.range_key_mismatch());
    }
    if (from.has_read_within_uncertainty_interval()) {
      mutable_read_within_uncertainty_interval()->::proto::ReadWithinUncertaintyIntervalError::MergeFrom(from.read_within_uncertainty_interval());
    }
    if (from.has_transaction_aborted()) {
      mutable_transaction_aborted()->::proto::TransactionAbortedError::MergeFrom(from.transaction_aborted());
    }
    if (from.has_transaction_push()) {
      mutable_transaction_push()->::proto::TransactionPushError::MergeFrom(from.transaction_push());
    }
    if (from.has_transaction_retry()) {
      mutable_transaction_retry()->::proto::TransactionRetryError::MergeFrom(from.transaction_retry());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_transaction_status()) {
      mutable_transaction_status()->::proto::TransactionStatusError::MergeFrom(from.transaction_status());
    }
    if (from.has_write_intent()) {
      mutable_write_intent()->::proto::WriteIntentError::MergeFrom(from.write_intent());
    }
    if (from.has_write_too_old()) {
      mutable_write_too_old()->::proto::WriteTooOldError::MergeFrom(from.write_too_old());
    }
    if (from.has_op_requires_txn()) {
      mutable_op_requires_txn()->::proto::OpRequiresTxnError::MergeFrom(from.op_requires_txn());
    }
    if (from.has_condition_failed()) {
      mutable_condition_failed()->::proto::ConditionFailedError::MergeFrom(from.condition_failed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    std::swap(generic_, other->generic_);
    std::swap(not_leader_, other->not_leader_);
    std::swap(range_not_found_, other->range_not_found_);
    std::swap(range_key_mismatch_, other->range_key_mismatch_);
    std::swap(read_within_uncertainty_interval_, other->read_within_uncertainty_interval_);
    std::swap(transaction_aborted_, other->transaction_aborted_);
    std::swap(transaction_push_, other->transaction_push_);
    std::swap(transaction_retry_, other->transaction_retry_);
    std::swap(transaction_status_, other->transaction_status_);
    std::swap(write_intent_, other->write_intent_);
    std::swap(write_too_old_, other->write_too_old_);
    std::swap(op_requires_txn_, other->op_requires_txn_);
    std::swap(condition_failed_, other->condition_failed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
