// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef PROTOBUF_config_2eproto__INCLUDED
#define PROTOBUF_config_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "github.com/gogo/protobuf/gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_config_2eproto();
void protobuf_AssignDesc_config_2eproto();
void protobuf_ShutdownFile_config_2eproto();

class Attributes;
class Replica;
class RangeDescriptor;
class GCPolicy;
class AcctConfig;
class PermConfig;
class ZoneConfig;

// ===================================================================

class Attributes : public ::google::protobuf::Message {
 public:
  Attributes();
  virtual ~Attributes();

  Attributes(const Attributes& from);

  inline Attributes& operator=(const Attributes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attributes& default_instance();

  void Swap(Attributes* other);

  // implements Message ----------------------------------------------

  Attributes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attributes& from);
  void MergeFrom(const Attributes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string attrs = 1;
  inline int attrs_size() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 1;
  inline const ::std::string& attrs(int index) const;
  inline ::std::string* mutable_attrs(int index);
  inline void set_attrs(int index, const ::std::string& value);
  inline void set_attrs(int index, const char* value);
  inline void set_attrs(int index, const char* value, size_t size);
  inline ::std::string* add_attrs();
  inline void add_attrs(const ::std::string& value);
  inline void add_attrs(const char* value);
  inline void add_attrs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attrs();

  // @@protoc_insertion_point(class_scope:proto.Attributes)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attrs_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static Attributes* default_instance_;
};
// -------------------------------------------------------------------

class Replica : public ::google::protobuf::Message {
 public:
  Replica();
  virtual ~Replica();

  Replica(const Replica& from);

  inline Replica& operator=(const Replica& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Replica& default_instance();

  void Swap(Replica* other);

  // implements Message ----------------------------------------------

  Replica* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Replica& from);
  void MergeFrom(const Replica& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 node_id = 1;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  inline ::google::protobuf::int32 node_id() const;
  inline void set_node_id(::google::protobuf::int32 value);

  // optional int32 store_id = 2;
  inline bool has_store_id() const;
  inline void clear_store_id();
  static const int kStoreIdFieldNumber = 2;
  inline ::google::protobuf::int32 store_id() const;
  inline void set_store_id(::google::protobuf::int32 value);

  // optional .proto.Attributes attrs = 3;
  inline bool has_attrs() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 3;
  inline const ::proto::Attributes& attrs() const;
  inline ::proto::Attributes* mutable_attrs();
  inline ::proto::Attributes* release_attrs();
  inline void set_allocated_attrs(::proto::Attributes* attrs);

  // @@protoc_insertion_point(class_scope:proto.Replica)
 private:
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_store_id();
  inline void clear_has_store_id();
  inline void set_has_attrs();
  inline void clear_has_attrs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 node_id_;
  ::google::protobuf::int32 store_id_;
  ::proto::Attributes* attrs_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static Replica* default_instance_;
};
// -------------------------------------------------------------------

class RangeDescriptor : public ::google::protobuf::Message {
 public:
  RangeDescriptor();
  virtual ~RangeDescriptor();

  RangeDescriptor(const RangeDescriptor& from);

  inline RangeDescriptor& operator=(const RangeDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeDescriptor& default_instance();

  void Swap(RangeDescriptor* other);

  // implements Message ----------------------------------------------

  RangeDescriptor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RangeDescriptor& from);
  void MergeFrom(const RangeDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 raft_id = 1;
  inline bool has_raft_id() const;
  inline void clear_raft_id();
  static const int kRaftIdFieldNumber = 1;
  inline ::google::protobuf::int64 raft_id() const;
  inline void set_raft_id(::google::protobuf::int64 value);

  // optional bytes start_key = 2;
  inline bool has_start_key() const;
  inline void clear_start_key();
  static const int kStartKeyFieldNumber = 2;
  inline const ::std::string& start_key() const;
  inline void set_start_key(const ::std::string& value);
  inline void set_start_key(const char* value);
  inline void set_start_key(const void* value, size_t size);
  inline ::std::string* mutable_start_key();
  inline ::std::string* release_start_key();
  inline void set_allocated_start_key(::std::string* start_key);

  // optional bytes end_key = 3;
  inline bool has_end_key() const;
  inline void clear_end_key();
  static const int kEndKeyFieldNumber = 3;
  inline const ::std::string& end_key() const;
  inline void set_end_key(const ::std::string& value);
  inline void set_end_key(const char* value);
  inline void set_end_key(const void* value, size_t size);
  inline ::std::string* mutable_end_key();
  inline ::std::string* release_end_key();
  inline void set_allocated_end_key(::std::string* end_key);

  // repeated .proto.Replica replicas = 4;
  inline int replicas_size() const;
  inline void clear_replicas();
  static const int kReplicasFieldNumber = 4;
  inline const ::proto::Replica& replicas(int index) const;
  inline ::proto::Replica* mutable_replicas(int index);
  inline ::proto::Replica* add_replicas();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::Replica >&
      replicas() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::Replica >*
      mutable_replicas();

  // @@protoc_insertion_point(class_scope:proto.RangeDescriptor)
 private:
  inline void set_has_raft_id();
  inline void clear_has_raft_id();
  inline void set_has_start_key();
  inline void clear_has_start_key();
  inline void set_has_end_key();
  inline void clear_has_end_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 raft_id_;
  ::std::string* start_key_;
  ::std::string* end_key_;
  ::google::protobuf::RepeatedPtrField< ::proto::Replica > replicas_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static RangeDescriptor* default_instance_;
};
// -------------------------------------------------------------------

class GCPolicy : public ::google::protobuf::Message {
 public:
  GCPolicy();
  virtual ~GCPolicy();

  GCPolicy(const GCPolicy& from);

  inline GCPolicy& operator=(const GCPolicy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCPolicy& default_instance();

  void Swap(GCPolicy* other);

  // implements Message ----------------------------------------------

  GCPolicy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCPolicy& from);
  void MergeFrom(const GCPolicy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ttl_seconds = 1;
  inline bool has_ttl_seconds() const;
  inline void clear_ttl_seconds();
  static const int kTtlSecondsFieldNumber = 1;
  inline ::google::protobuf::int32 ttl_seconds() const;
  inline void set_ttl_seconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GCPolicy)
 private:
  inline void set_has_ttl_seconds();
  inline void clear_has_ttl_seconds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ttl_seconds_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static GCPolicy* default_instance_;
};
// -------------------------------------------------------------------

class AcctConfig : public ::google::protobuf::Message {
 public:
  AcctConfig();
  virtual ~AcctConfig();

  AcctConfig(const AcctConfig& from);

  inline AcctConfig& operator=(const AcctConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcctConfig& default_instance();

  void Swap(AcctConfig* other);

  // implements Message ----------------------------------------------

  AcctConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcctConfig& from);
  void MergeFrom(const AcctConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cluster_id = 1;
  inline bool has_cluster_id() const;
  inline void clear_cluster_id();
  static const int kClusterIdFieldNumber = 1;
  inline const ::std::string& cluster_id() const;
  inline void set_cluster_id(const ::std::string& value);
  inline void set_cluster_id(const char* value);
  inline void set_cluster_id(const char* value, size_t size);
  inline ::std::string* mutable_cluster_id();
  inline ::std::string* release_cluster_id();
  inline void set_allocated_cluster_id(::std::string* cluster_id);

  // @@protoc_insertion_point(class_scope:proto.AcctConfig)
 private:
  inline void set_has_cluster_id();
  inline void clear_has_cluster_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cluster_id_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static AcctConfig* default_instance_;
};
// -------------------------------------------------------------------

class PermConfig : public ::google::protobuf::Message {
 public:
  PermConfig();
  virtual ~PermConfig();

  PermConfig(const PermConfig& from);

  inline PermConfig& operator=(const PermConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PermConfig& default_instance();

  void Swap(PermConfig* other);

  // implements Message ----------------------------------------------

  PermConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PermConfig& from);
  void MergeFrom(const PermConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string read = 1;
  inline int read_size() const;
  inline void clear_read();
  static const int kReadFieldNumber = 1;
  inline const ::std::string& read(int index) const;
  inline ::std::string* mutable_read(int index);
  inline void set_read(int index, const ::std::string& value);
  inline void set_read(int index, const char* value);
  inline void set_read(int index, const char* value, size_t size);
  inline ::std::string* add_read();
  inline void add_read(const ::std::string& value);
  inline void add_read(const char* value);
  inline void add_read(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& read() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_read();

  // repeated string write = 2;
  inline int write_size() const;
  inline void clear_write();
  static const int kWriteFieldNumber = 2;
  inline const ::std::string& write(int index) const;
  inline ::std::string* mutable_write(int index);
  inline void set_write(int index, const ::std::string& value);
  inline void set_write(int index, const char* value);
  inline void set_write(int index, const char* value, size_t size);
  inline ::std::string* add_write();
  inline void add_write(const ::std::string& value);
  inline void add_write(const char* value);
  inline void add_write(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& write() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_write();

  // @@protoc_insertion_point(class_scope:proto.PermConfig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> read_;
  ::google::protobuf::RepeatedPtrField< ::std::string> write_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static PermConfig* default_instance_;
};
// -------------------------------------------------------------------

class ZoneConfig : public ::google::protobuf::Message {
 public:
  ZoneConfig();
  virtual ~ZoneConfig();

  ZoneConfig(const ZoneConfig& from);

  inline ZoneConfig& operator=(const ZoneConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZoneConfig& default_instance();

  void Swap(ZoneConfig* other);

  // implements Message ----------------------------------------------

  ZoneConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZoneConfig& from);
  void MergeFrom(const ZoneConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.Attributes replica_attrs = 1;
  inline int replica_attrs_size() const;
  inline void clear_replica_attrs();
  static const int kReplicaAttrsFieldNumber = 1;
  inline const ::proto::Attributes& replica_attrs(int index) const;
  inline ::proto::Attributes* mutable_replica_attrs(int index);
  inline ::proto::Attributes* add_replica_attrs();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::Attributes >&
      replica_attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::Attributes >*
      mutable_replica_attrs();

  // optional int64 range_min_bytes = 2;
  inline bool has_range_min_bytes() const;
  inline void clear_range_min_bytes();
  static const int kRangeMinBytesFieldNumber = 2;
  inline ::google::protobuf::int64 range_min_bytes() const;
  inline void set_range_min_bytes(::google::protobuf::int64 value);

  // optional int64 range_max_bytes = 3;
  inline bool has_range_max_bytes() const;
  inline void clear_range_max_bytes();
  static const int kRangeMaxBytesFieldNumber = 3;
  inline ::google::protobuf::int64 range_max_bytes() const;
  inline void set_range_max_bytes(::google::protobuf::int64 value);

  // optional .proto.GCPolicy gc = 4;
  inline bool has_gc() const;
  inline void clear_gc();
  static const int kGcFieldNumber = 4;
  inline const ::proto::GCPolicy& gc() const;
  inline ::proto::GCPolicy* mutable_gc();
  inline ::proto::GCPolicy* release_gc();
  inline void set_allocated_gc(::proto::GCPolicy* gc);

  // @@protoc_insertion_point(class_scope:proto.ZoneConfig)
 private:
  inline void set_has_range_min_bytes();
  inline void clear_has_range_min_bytes();
  inline void set_has_range_max_bytes();
  inline void clear_has_range_max_bytes();
  inline void set_has_gc();
  inline void clear_has_gc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::Attributes > replica_attrs_;
  ::google::protobuf::int64 range_min_bytes_;
  ::google::protobuf::int64 range_max_bytes_;
  ::proto::GCPolicy* gc_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static ZoneConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// Attributes

// repeated string attrs = 1;
inline int Attributes::attrs_size() const {
  return attrs_.size();
}
inline void Attributes::clear_attrs() {
  attrs_.Clear();
}
inline const ::std::string& Attributes::attrs(int index) const {
  // @@protoc_insertion_point(field_get:proto.Attributes.attrs)
  return attrs_.Get(index);
}
inline ::std::string* Attributes::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Attributes.attrs)
  return attrs_.Mutable(index);
}
inline void Attributes::set_attrs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.Attributes.attrs)
  attrs_.Mutable(index)->assign(value);
}
inline void Attributes::set_attrs(int index, const char* value) {
  attrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.Attributes.attrs)
}
inline void Attributes::set_attrs(int index, const char* value, size_t size) {
  attrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.Attributes.attrs)
}
inline ::std::string* Attributes::add_attrs() {
  return attrs_.Add();
}
inline void Attributes::add_attrs(const ::std::string& value) {
  attrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.Attributes.attrs)
}
inline void Attributes::add_attrs(const char* value) {
  attrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.Attributes.attrs)
}
inline void Attributes::add_attrs(const char* value, size_t size) {
  attrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.Attributes.attrs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Attributes::attrs() const {
  // @@protoc_insertion_point(field_list:proto.Attributes.attrs)
  return attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Attributes::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:proto.Attributes.attrs)
  return &attrs_;
}

// -------------------------------------------------------------------

// Replica

// optional int32 node_id = 1;
inline bool Replica::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Replica::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Replica::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Replica::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
inline ::google::protobuf::int32 Replica::node_id() const {
  // @@protoc_insertion_point(field_get:proto.Replica.node_id)
  return node_id_;
}
inline void Replica::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:proto.Replica.node_id)
}

// optional int32 store_id = 2;
inline bool Replica::has_store_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Replica::set_has_store_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Replica::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Replica::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
inline ::google::protobuf::int32 Replica::store_id() const {
  // @@protoc_insertion_point(field_get:proto.Replica.store_id)
  return store_id_;
}
inline void Replica::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:proto.Replica.store_id)
}

// optional .proto.Attributes attrs = 3;
inline bool Replica::has_attrs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Replica::set_has_attrs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Replica::clear_has_attrs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Replica::clear_attrs() {
  if (attrs_ != NULL) attrs_->::proto::Attributes::Clear();
  clear_has_attrs();
}
inline const ::proto::Attributes& Replica::attrs() const {
  // @@protoc_insertion_point(field_get:proto.Replica.attrs)
  return attrs_ != NULL ? *attrs_ : *default_instance_->attrs_;
}
inline ::proto::Attributes* Replica::mutable_attrs() {
  set_has_attrs();
  if (attrs_ == NULL) attrs_ = new ::proto::Attributes;
  // @@protoc_insertion_point(field_mutable:proto.Replica.attrs)
  return attrs_;
}
inline ::proto::Attributes* Replica::release_attrs() {
  clear_has_attrs();
  ::proto::Attributes* temp = attrs_;
  attrs_ = NULL;
  return temp;
}
inline void Replica::set_allocated_attrs(::proto::Attributes* attrs) {
  delete attrs_;
  attrs_ = attrs;
  if (attrs) {
    set_has_attrs();
  } else {
    clear_has_attrs();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Replica.attrs)
}

// -------------------------------------------------------------------

// RangeDescriptor

// optional int64 raft_id = 1;
inline bool RangeDescriptor::has_raft_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeDescriptor::set_has_raft_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RangeDescriptor::clear_has_raft_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RangeDescriptor::clear_raft_id() {
  raft_id_ = GOOGLE_LONGLONG(0);
  clear_has_raft_id();
}
inline ::google::protobuf::int64 RangeDescriptor::raft_id() const {
  // @@protoc_insertion_point(field_get:proto.RangeDescriptor.raft_id)
  return raft_id_;
}
inline void RangeDescriptor::set_raft_id(::google::protobuf::int64 value) {
  set_has_raft_id();
  raft_id_ = value;
  // @@protoc_insertion_point(field_set:proto.RangeDescriptor.raft_id)
}

// optional bytes start_key = 2;
inline bool RangeDescriptor::has_start_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RangeDescriptor::set_has_start_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RangeDescriptor::clear_has_start_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RangeDescriptor::clear_start_key() {
  if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_key_->clear();
  }
  clear_has_start_key();
}
inline const ::std::string& RangeDescriptor::start_key() const {
  // @@protoc_insertion_point(field_get:proto.RangeDescriptor.start_key)
  return *start_key_;
}
inline void RangeDescriptor::set_start_key(const ::std::string& value) {
  set_has_start_key();
  if (start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_key_ = new ::std::string;
  }
  start_key_->assign(value);
  // @@protoc_insertion_point(field_set:proto.RangeDescriptor.start_key)
}
inline void RangeDescriptor::set_start_key(const char* value) {
  set_has_start_key();
  if (start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_key_ = new ::std::string;
  }
  start_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.RangeDescriptor.start_key)
}
inline void RangeDescriptor::set_start_key(const void* value, size_t size) {
  set_has_start_key();
  if (start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_key_ = new ::std::string;
  }
  start_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.RangeDescriptor.start_key)
}
inline ::std::string* RangeDescriptor::mutable_start_key() {
  set_has_start_key();
  if (start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.RangeDescriptor.start_key)
  return start_key_;
}
inline ::std::string* RangeDescriptor::release_start_key() {
  clear_has_start_key();
  if (start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_key_;
    start_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RangeDescriptor::set_allocated_start_key(::std::string* start_key) {
  if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_key_;
  }
  if (start_key) {
    set_has_start_key();
    start_key_ = start_key;
  } else {
    clear_has_start_key();
    start_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RangeDescriptor.start_key)
}

// optional bytes end_key = 3;
inline bool RangeDescriptor::has_end_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RangeDescriptor::set_has_end_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RangeDescriptor::clear_has_end_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RangeDescriptor::clear_end_key() {
  if (end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_key_->clear();
  }
  clear_has_end_key();
}
inline const ::std::string& RangeDescriptor::end_key() const {
  // @@protoc_insertion_point(field_get:proto.RangeDescriptor.end_key)
  return *end_key_;
}
inline void RangeDescriptor::set_end_key(const ::std::string& value) {
  set_has_end_key();
  if (end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_key_ = new ::std::string;
  }
  end_key_->assign(value);
  // @@protoc_insertion_point(field_set:proto.RangeDescriptor.end_key)
}
inline void RangeDescriptor::set_end_key(const char* value) {
  set_has_end_key();
  if (end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_key_ = new ::std::string;
  }
  end_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.RangeDescriptor.end_key)
}
inline void RangeDescriptor::set_end_key(const void* value, size_t size) {
  set_has_end_key();
  if (end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_key_ = new ::std::string;
  }
  end_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.RangeDescriptor.end_key)
}
inline ::std::string* RangeDescriptor::mutable_end_key() {
  set_has_end_key();
  if (end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.RangeDescriptor.end_key)
  return end_key_;
}
inline ::std::string* RangeDescriptor::release_end_key() {
  clear_has_end_key();
  if (end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_key_;
    end_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RangeDescriptor::set_allocated_end_key(::std::string* end_key) {
  if (end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_key_;
  }
  if (end_key) {
    set_has_end_key();
    end_key_ = end_key;
  } else {
    clear_has_end_key();
    end_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RangeDescriptor.end_key)
}

// repeated .proto.Replica replicas = 4;
inline int RangeDescriptor::replicas_size() const {
  return replicas_.size();
}
inline void RangeDescriptor::clear_replicas() {
  replicas_.Clear();
}
inline const ::proto::Replica& RangeDescriptor::replicas(int index) const {
  // @@protoc_insertion_point(field_get:proto.RangeDescriptor.replicas)
  return replicas_.Get(index);
}
inline ::proto::Replica* RangeDescriptor::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:proto.RangeDescriptor.replicas)
  return replicas_.Mutable(index);
}
inline ::proto::Replica* RangeDescriptor::add_replicas() {
  // @@protoc_insertion_point(field_add:proto.RangeDescriptor.replicas)
  return replicas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::Replica >&
RangeDescriptor::replicas() const {
  // @@protoc_insertion_point(field_list:proto.RangeDescriptor.replicas)
  return replicas_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::Replica >*
RangeDescriptor::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:proto.RangeDescriptor.replicas)
  return &replicas_;
}

// -------------------------------------------------------------------

// GCPolicy

// optional int32 ttl_seconds = 1;
inline bool GCPolicy::has_ttl_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCPolicy::set_has_ttl_seconds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCPolicy::clear_has_ttl_seconds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCPolicy::clear_ttl_seconds() {
  ttl_seconds_ = 0;
  clear_has_ttl_seconds();
}
inline ::google::protobuf::int32 GCPolicy::ttl_seconds() const {
  // @@protoc_insertion_point(field_get:proto.GCPolicy.ttl_seconds)
  return ttl_seconds_;
}
inline void GCPolicy::set_ttl_seconds(::google::protobuf::int32 value) {
  set_has_ttl_seconds();
  ttl_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.GCPolicy.ttl_seconds)
}

// -------------------------------------------------------------------

// AcctConfig

// optional string cluster_id = 1;
inline bool AcctConfig::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AcctConfig::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AcctConfig::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AcctConfig::clear_cluster_id() {
  if (cluster_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_id_->clear();
  }
  clear_has_cluster_id();
}
inline const ::std::string& AcctConfig::cluster_id() const {
  // @@protoc_insertion_point(field_get:proto.AcctConfig.cluster_id)
  return *cluster_id_;
}
inline void AcctConfig::set_cluster_id(const ::std::string& value) {
  set_has_cluster_id();
  if (cluster_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_id_ = new ::std::string;
  }
  cluster_id_->assign(value);
  // @@protoc_insertion_point(field_set:proto.AcctConfig.cluster_id)
}
inline void AcctConfig::set_cluster_id(const char* value) {
  set_has_cluster_id();
  if (cluster_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_id_ = new ::std::string;
  }
  cluster_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.AcctConfig.cluster_id)
}
inline void AcctConfig::set_cluster_id(const char* value, size_t size) {
  set_has_cluster_id();
  if (cluster_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_id_ = new ::std::string;
  }
  cluster_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.AcctConfig.cluster_id)
}
inline ::std::string* AcctConfig::mutable_cluster_id() {
  set_has_cluster_id();
  if (cluster_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.AcctConfig.cluster_id)
  return cluster_id_;
}
inline ::std::string* AcctConfig::release_cluster_id() {
  clear_has_cluster_id();
  if (cluster_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cluster_id_;
    cluster_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcctConfig::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cluster_id_;
  }
  if (cluster_id) {
    set_has_cluster_id();
    cluster_id_ = cluster_id;
  } else {
    clear_has_cluster_id();
    cluster_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AcctConfig.cluster_id)
}

// -------------------------------------------------------------------

// PermConfig

// repeated string read = 1;
inline int PermConfig::read_size() const {
  return read_.size();
}
inline void PermConfig::clear_read() {
  read_.Clear();
}
inline const ::std::string& PermConfig::read(int index) const {
  // @@protoc_insertion_point(field_get:proto.PermConfig.read)
  return read_.Get(index);
}
inline ::std::string* PermConfig::mutable_read(int index) {
  // @@protoc_insertion_point(field_mutable:proto.PermConfig.read)
  return read_.Mutable(index);
}
inline void PermConfig::set_read(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.PermConfig.read)
  read_.Mutable(index)->assign(value);
}
inline void PermConfig::set_read(int index, const char* value) {
  read_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.PermConfig.read)
}
inline void PermConfig::set_read(int index, const char* value, size_t size) {
  read_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.PermConfig.read)
}
inline ::std::string* PermConfig::add_read() {
  return read_.Add();
}
inline void PermConfig::add_read(const ::std::string& value) {
  read_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.PermConfig.read)
}
inline void PermConfig::add_read(const char* value) {
  read_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.PermConfig.read)
}
inline void PermConfig::add_read(const char* value, size_t size) {
  read_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.PermConfig.read)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PermConfig::read() const {
  // @@protoc_insertion_point(field_list:proto.PermConfig.read)
  return read_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PermConfig::mutable_read() {
  // @@protoc_insertion_point(field_mutable_list:proto.PermConfig.read)
  return &read_;
}

// repeated string write = 2;
inline int PermConfig::write_size() const {
  return write_.size();
}
inline void PermConfig::clear_write() {
  write_.Clear();
}
inline const ::std::string& PermConfig::write(int index) const {
  // @@protoc_insertion_point(field_get:proto.PermConfig.write)
  return write_.Get(index);
}
inline ::std::string* PermConfig::mutable_write(int index) {
  // @@protoc_insertion_point(field_mutable:proto.PermConfig.write)
  return write_.Mutable(index);
}
inline void PermConfig::set_write(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.PermConfig.write)
  write_.Mutable(index)->assign(value);
}
inline void PermConfig::set_write(int index, const char* value) {
  write_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.PermConfig.write)
}
inline void PermConfig::set_write(int index, const char* value, size_t size) {
  write_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.PermConfig.write)
}
inline ::std::string* PermConfig::add_write() {
  return write_.Add();
}
inline void PermConfig::add_write(const ::std::string& value) {
  write_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.PermConfig.write)
}
inline void PermConfig::add_write(const char* value) {
  write_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.PermConfig.write)
}
inline void PermConfig::add_write(const char* value, size_t size) {
  write_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.PermConfig.write)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PermConfig::write() const {
  // @@protoc_insertion_point(field_list:proto.PermConfig.write)
  return write_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PermConfig::mutable_write() {
  // @@protoc_insertion_point(field_mutable_list:proto.PermConfig.write)
  return &write_;
}

// -------------------------------------------------------------------

// ZoneConfig

// repeated .proto.Attributes replica_attrs = 1;
inline int ZoneConfig::replica_attrs_size() const {
  return replica_attrs_.size();
}
inline void ZoneConfig::clear_replica_attrs() {
  replica_attrs_.Clear();
}
inline const ::proto::Attributes& ZoneConfig::replica_attrs(int index) const {
  // @@protoc_insertion_point(field_get:proto.ZoneConfig.replica_attrs)
  return replica_attrs_.Get(index);
}
inline ::proto::Attributes* ZoneConfig::mutable_replica_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ZoneConfig.replica_attrs)
  return replica_attrs_.Mutable(index);
}
inline ::proto::Attributes* ZoneConfig::add_replica_attrs() {
  // @@protoc_insertion_point(field_add:proto.ZoneConfig.replica_attrs)
  return replica_attrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::Attributes >&
ZoneConfig::replica_attrs() const {
  // @@protoc_insertion_point(field_list:proto.ZoneConfig.replica_attrs)
  return replica_attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::Attributes >*
ZoneConfig::mutable_replica_attrs() {
  // @@protoc_insertion_point(field_mutable_list:proto.ZoneConfig.replica_attrs)
  return &replica_attrs_;
}

// optional int64 range_min_bytes = 2;
inline bool ZoneConfig::has_range_min_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZoneConfig::set_has_range_min_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZoneConfig::clear_has_range_min_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZoneConfig::clear_range_min_bytes() {
  range_min_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_range_min_bytes();
}
inline ::google::protobuf::int64 ZoneConfig::range_min_bytes() const {
  // @@protoc_insertion_point(field_get:proto.ZoneConfig.range_min_bytes)
  return range_min_bytes_;
}
inline void ZoneConfig::set_range_min_bytes(::google::protobuf::int64 value) {
  set_has_range_min_bytes();
  range_min_bytes_ = value;
  // @@protoc_insertion_point(field_set:proto.ZoneConfig.range_min_bytes)
}

// optional int64 range_max_bytes = 3;
inline bool ZoneConfig::has_range_max_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZoneConfig::set_has_range_max_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZoneConfig::clear_has_range_max_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZoneConfig::clear_range_max_bytes() {
  range_max_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_range_max_bytes();
}
inline ::google::protobuf::int64 ZoneConfig::range_max_bytes() const {
  // @@protoc_insertion_point(field_get:proto.ZoneConfig.range_max_bytes)
  return range_max_bytes_;
}
inline void ZoneConfig::set_range_max_bytes(::google::protobuf::int64 value) {
  set_has_range_max_bytes();
  range_max_bytes_ = value;
  // @@protoc_insertion_point(field_set:proto.ZoneConfig.range_max_bytes)
}

// optional .proto.GCPolicy gc = 4;
inline bool ZoneConfig::has_gc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZoneConfig::set_has_gc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZoneConfig::clear_has_gc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZoneConfig::clear_gc() {
  if (gc_ != NULL) gc_->::proto::GCPolicy::Clear();
  clear_has_gc();
}
inline const ::proto::GCPolicy& ZoneConfig::gc() const {
  // @@protoc_insertion_point(field_get:proto.ZoneConfig.gc)
  return gc_ != NULL ? *gc_ : *default_instance_->gc_;
}
inline ::proto::GCPolicy* ZoneConfig::mutable_gc() {
  set_has_gc();
  if (gc_ == NULL) gc_ = new ::proto::GCPolicy;
  // @@protoc_insertion_point(field_mutable:proto.ZoneConfig.gc)
  return gc_;
}
inline ::proto::GCPolicy* ZoneConfig::release_gc() {
  clear_has_gc();
  ::proto::GCPolicy* temp = gc_;
  gc_ = NULL;
  return temp;
}
inline void ZoneConfig::set_allocated_gc(::proto::GCPolicy* gc) {
  delete gc_;
  gc_ = gc;
  if (gc) {
    set_has_gc();
  } else {
    clear_has_gc();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ZoneConfig.gc)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_config_2eproto__INCLUDED
